// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-x-msg-im-hlr-usr-dat.proto

#include "net-x-msg-im-hlr-usr-dat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImHlrUsrDatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrDat>
      _instance;
} _XmsgImHlrUsrDat_default_instance_;
class XmsgImHlrUsrDatPri_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrDatPri_InfoEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrDatPriDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrDatPri>
      _instance;
} _XmsgImHlrUsrDatPri_default_instance_;
class XmsgImHlrUsrDatPub_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrDatPub_InfoEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrDatPubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrDatPub>
      _instance;
} _XmsgImHlrUsrDatPub_default_instance_;
class XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrInfoQueryReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoQueryReq>
      _instance;
} _XmsgImHlrUsrInfoQueryReq_default_instance_;
class XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrInfoQueryRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoQueryRsp>
      _instance;
} _XmsgImHlrUsrInfoQueryRsp_default_instance_;
class XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrInfoUpdateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoUpdateReq>
      _instance;
} _XmsgImHlrUsrInfoUpdateReq_default_instance_;
class XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse>
      _instance;
} _XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrUsrInfoUpdateRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrUsrInfoUpdateRsp>
      _instance;
} _XmsgImHlrUsrInfoUpdateRsp_default_instance_;
namespace protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto {
void InitDefaultsXmsgImHlrUsrDatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPri();
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPub();
  {
    void* ptr = &::_XmsgImHlrUsrDat_default_instance_;
    new (ptr) ::XmsgImHlrUsrDat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrDat::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrDat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrDatImpl);
}

void InitDefaultsXmsgImHlrUsrDatPri_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrDatPri_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse();
  }
  ::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrDatPri_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrDatPri_InfoEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrDatPriImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPri_InfoEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrDatPri_default_instance_;
    new (ptr) ::XmsgImHlrUsrDatPri();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrDatPri::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrDatPri() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrDatPriImpl);
}

void InitDefaultsXmsgImHlrUsrDatPub_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrDatPub_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse();
  }
  ::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrDatPub_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrDatPub_InfoEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrDatPubImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPub_InfoEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrDatPub_default_instance_;
    new (ptr) ::XmsgImHlrUsrDatPub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrDatPub::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrDatPub() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrDatPubImpl);
}

void InitDefaultsXmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse();
  }
  ::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrInfoQueryReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrInfoQueryReq_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoQueryReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrInfoQueryReq::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoQueryReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoQueryReqImpl);
}

void InitDefaultsXmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse();
  }
  ::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrInfoQueryRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrInfoQueryRsp_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoQueryRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrInfoQueryRsp::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoQueryRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoQueryRspImpl);
}

void InitDefaultsXmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse();
  }
  ::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrInfoUpdateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrInfoUpdateReq_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoUpdateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrInfoUpdateReq::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoUpdateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoUpdateReqImpl);
}

void InitDefaultsXmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse();
  }
  ::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImHlrUsrInfoUpdateRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImHlrUsrInfoUpdateRsp_default_instance_;
    new (ptr) ::XmsgImHlrUsrInfoUpdateRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrUsrInfoUpdateRsp::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrUsrInfoUpdateRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrUsrInfoUpdateRspImpl);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, pri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, gts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDat, uts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPri, syseventverread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrDatPub, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryReq, ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoQueryRsp, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateReq, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrUsrInfoUpdateRsp, ext_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgImHlrUsrDat)},
  { 11, 18, sizeof(::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse)},
  { 20, -1, sizeof(::XmsgImHlrUsrDatPri)},
  { 28, 35, sizeof(::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse)},
  { 37, -1, sizeof(::XmsgImHlrUsrDatPub)},
  { 44, 51, sizeof(::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse)},
  { 53, -1, sizeof(::XmsgImHlrUsrInfoQueryReq)},
  { 59, 66, sizeof(::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse)},
  { 68, -1, sizeof(::XmsgImHlrUsrInfoQueryRsp)},
  { 74, 81, sizeof(::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse)},
  { 83, -1, sizeof(::XmsgImHlrUsrInfoUpdateReq)},
  { 89, 96, sizeof(::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse)},
  { 98, -1, sizeof(::XmsgImHlrUsrInfoUpdateRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrDat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrDatPri_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrDatPri_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrDatPub_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrDatPub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoQueryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoQueryRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoUpdateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrUsrInfoUpdateRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "net-x-msg-im-hlr-usr-dat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036net-x-msg-im-hlr-usr-dat.proto\"\211\001\n\017Xms"
      "gImHlrUsrDat\022\013\n\003uid\030\001 \001(\t\022\013\n\003ver\030\002 \001(\004\022 "
      "\n\003pri\030\003 \001(\0132\023.XmsgImHlrUsrDatPri\022 \n\003pub\030"
      "\004 \001(\0132\023.XmsgImHlrUsrDatPub\022\013\n\003gts\030\005 \001(\004\022"
      "\013\n\003uts\030\006 \001(\004\"\227\001\n\022XmsgImHlrUsrDatPri\022\016\n\006e"
      "nable\030\001 \001(\010\022+\n\004info\030\002 \003(\0132\035.XmsgImHlrUsr"
      "DatPri.InfoEntry\022\027\n\017sysEventVerRead\030\003 \001("
      "\004\032+\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\t:\0028\001\"|\n\022XmsgImHlrUsrDatPub\022\014\n\004name\030\001 \001"
      "(\t\022+\n\004info\030\002 \003(\0132\035.XmsgImHlrUsrDatPub.In"
      "foEntry\032+\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001\"w\n\030XmsgImHlrUsrInfoQueryReq"
      "\022/\n\003ext\030\001 \003(\0132\".XmsgImHlrUsrInfoQueryReq"
      ".ExtEntry\032*\n\010ExtEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\t:\0028\001\"z\n\030XmsgImHlrUsrInfoQueryRs"
      "p\0221\n\004info\030\001 \003(\0132#.XmsgImHlrUsrInfoQueryR"
      "sp.InfoEntry\032+\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005value\030\002 \001(\t:\0028\001\"|\n\031XmsgImHlrUsrInfoUpd"
      "ateReq\0222\n\004info\030\001 \003(\0132$.XmsgImHlrUsrInfoU"
      "pdateReq.InfoEntry\032+\n\tInfoEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"y\n\031XmsgImHlrUsrI"
      "nfoUpdateRsp\0220\n\003ext\030\001 \003(\0132#.XmsgImHlrUsr"
      "InfoUpdateRsp.ExtEntry\032*\n\010ExtEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\035\n\010x.msg.pbB\021"
      "XmsgImHlrUsrDatPbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net-x-msg-im-hlr-usr-dat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto

// ===================================================================

void XmsgImHlrUsrDat::InitAsDefaultInstance() {
  ::_XmsgImHlrUsrDat_default_instance_._instance.get_mutable()->pri_ = const_cast< ::XmsgImHlrUsrDatPri*>(
      ::XmsgImHlrUsrDatPri::internal_default_instance());
  ::_XmsgImHlrUsrDat_default_instance_._instance.get_mutable()->pub_ = const_cast< ::XmsgImHlrUsrDatPub*>(
      ::XmsgImHlrUsrDatPub::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrDat::kUidFieldNumber;
const int XmsgImHlrUsrDat::kVerFieldNumber;
const int XmsgImHlrUsrDat::kPriFieldNumber;
const int XmsgImHlrUsrDat::kPubFieldNumber;
const int XmsgImHlrUsrDat::kGtsFieldNumber;
const int XmsgImHlrUsrDat::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrDat::XmsgImHlrUsrDat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrDat)
}
XmsgImHlrUsrDat::XmsgImHlrUsrDat(const XmsgImHlrUsrDat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_pri()) {
    pri_ = new ::XmsgImHlrUsrDatPri(*from.pri_);
  } else {
    pri_ = NULL;
  }
  if (from.has_pub()) {
    pub_ = new ::XmsgImHlrUsrDatPub(*from.pub_);
  } else {
    pub_ = NULL;
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&uts_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(uts_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrDat)
}

void XmsgImHlrUsrDat::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&pri_)) + sizeof(uts_));
  _cached_size_ = 0;
}

XmsgImHlrUsrDat::~XmsgImHlrUsrDat() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrDat)
  SharedDtor();
}

void XmsgImHlrUsrDat::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pri_;
  if (this != internal_default_instance()) delete pub_;
}

void XmsgImHlrUsrDat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrDat::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrDat& XmsgImHlrUsrDat::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDat();
  return *internal_default_instance();
}

XmsgImHlrUsrDat* XmsgImHlrUsrDat::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrDat* n = new XmsgImHlrUsrDat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrDat::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrDat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pri_ != NULL) {
    delete pri_;
  }
  pri_ = NULL;
  if (GetArenaNoVirtual() == NULL && pub_ != NULL) {
    delete pub_;
  }
  pub_ = NULL;
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(uts_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrDat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrDat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDat.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrUsrDatPri pri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrUsrDatPub pub = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrDat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrDat)
  return false;
#undef DO_
}

void XmsgImHlrUsrDat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrDat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrUsrDat.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // uint64 ver = 2;
  if (this->ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ver(), output);
  }

  // .XmsgImHlrUsrDatPri pri = 3;
  if (this->has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pri_, output);
  }

  // .XmsgImHlrUsrDatPub pub = 4;
  if (this->has_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pub_, output);
  }

  // uint64 gts = 5;
  if (this->gts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gts(), output);
  }

  // uint64 uts = 6;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrDat)
}

::google::protobuf::uint8* XmsgImHlrUsrDat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrDat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrUsrDat.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // uint64 ver = 2;
  if (this->ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ver(), target);
  }

  // .XmsgImHlrUsrDatPri pri = 3;
  if (this->has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pri_, deterministic, target);
  }

  // .XmsgImHlrUsrDatPub pub = 4;
  if (this->has_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->pub_, deterministic, target);
  }

  // uint64 gts = 5;
  if (this->gts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gts(), target);
  }

  // uint64 uts = 6;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrDat)
  return target;
}

size_t XmsgImHlrUsrDat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrDat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // .XmsgImHlrUsrDatPri pri = 3;
  if (this->has_pri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pri_);
  }

  // .XmsgImHlrUsrDatPub pub = 4;
  if (this->has_pub()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pub_);
  }

  // uint64 ver = 2;
  if (this->ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ver());
  }

  // uint64 gts = 5;
  if (this->gts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gts());
  }

  // uint64 uts = 6;
  if (this->uts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrDat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrDat)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrDat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrDat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrDat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrDat)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrDat::MergeFrom(const XmsgImHlrUsrDat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrDat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_pri()) {
    mutable_pri()->::XmsgImHlrUsrDatPri::MergeFrom(from.pri());
  }
  if (from.has_pub()) {
    mutable_pub()->::XmsgImHlrUsrDatPub::MergeFrom(from.pub());
  }
  if (from.ver() != 0) {
    set_ver(from.ver());
  }
  if (from.gts() != 0) {
    set_gts(from.gts());
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
}

void XmsgImHlrUsrDat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrDat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrDat::CopyFrom(const XmsgImHlrUsrDat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrDat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrDat::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrDat::Swap(XmsgImHlrUsrDat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrDat::InternalSwap(XmsgImHlrUsrDat* other) {
  using std::swap;
  uid_.Swap(&other->uid_);
  swap(pri_, other->pri_);
  swap(pub_, other->pub_);
  swap(ver_, other->ver_);
  swap(gts_, other->gts_);
  swap(uts_, other->uts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrDat::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse() {}
XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::XmsgImHlrUsrDatPri_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrDatPri_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[1];
}
void XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrDatPri::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrDatPri::kEnableFieldNumber;
const int XmsgImHlrUsrDatPri::kInfoFieldNumber;
const int XmsgImHlrUsrDatPri::kSysEventVerReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrDatPri::XmsgImHlrUsrDatPri()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPri();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrDatPri)
}
XmsgImHlrUsrDatPri::XmsgImHlrUsrDatPri(const XmsgImHlrUsrDatPri& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  ::memcpy(&syseventverread_, &from.syseventverread_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&syseventverread_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrDatPri)
}

void XmsgImHlrUsrDatPri::SharedCtor() {
  ::memset(&syseventverread_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&syseventverread_)) + sizeof(enable_));
  _cached_size_ = 0;
}

XmsgImHlrUsrDatPri::~XmsgImHlrUsrDatPri() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrDatPri)
  SharedDtor();
}

void XmsgImHlrUsrDatPri::SharedDtor() {
}

void XmsgImHlrUsrDatPri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrDatPri::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrDatPri& XmsgImHlrUsrDatPri::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPri();
  return *internal_default_instance();
}

XmsgImHlrUsrDatPri* XmsgImHlrUsrDatPri::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrDatPri* n = new XmsgImHlrUsrDatPri;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrDatPri::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrDatPri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  ::memset(&syseventverread_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&syseventverread_)) + sizeof(enable_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrDatPri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrDatPri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          XmsgImHlrUsrDatPri_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrDatPri_InfoEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDatPri.InfoEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDatPri.InfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sysEventVerRead = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &syseventverread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrDatPri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrDatPri)
  return false;
#undef DO_
}

void XmsgImHlrUsrDatPri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrDatPri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // map<string, string> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPri.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPri.InfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 sysEventVerRead = 3;
  if (this->syseventverread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->syseventverread(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrDatPri)
}

::google::protobuf::uint8* XmsgImHlrUsrDatPri::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrDatPri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // map<string, string> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPri.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPri.InfoEntry.value");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 sysEventVerRead = 3;
  if (this->syseventverread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->syseventverread(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrDatPri)
  return target;
}

size_t XmsgImHlrUsrDatPri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrDatPri)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> info = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPri_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 sysEventVerRead = 3;
  if (this->syseventverread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->syseventverread());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrDatPri::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrDatPri)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrDatPri* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrDatPri>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrDatPri)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrDatPri)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrDatPri::MergeFrom(const XmsgImHlrUsrDatPri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrDatPri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.syseventverread() != 0) {
    set_syseventverread(from.syseventverread());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void XmsgImHlrUsrDatPri::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrDatPri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrDatPri::CopyFrom(const XmsgImHlrUsrDatPri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrDatPri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrDatPri::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrDatPri::Swap(XmsgImHlrUsrDatPri* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrDatPri::InternalSwap(XmsgImHlrUsrDatPri* other) {
  using std::swap;
  info_.Swap(&other->info_);
  swap(syseventverread_, other->syseventverread_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrDatPri::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse() {}
XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::XmsgImHlrUsrDatPub_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrDatPub_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[3];
}
void XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrDatPub::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrDatPub::kNameFieldNumber;
const int XmsgImHlrUsrDatPub::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrDatPub::XmsgImHlrUsrDatPub()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPub();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrDatPub)
}
XmsgImHlrUsrDatPub::XmsgImHlrUsrDatPub(const XmsgImHlrUsrDatPub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrDatPub)
}

void XmsgImHlrUsrDatPub::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImHlrUsrDatPub::~XmsgImHlrUsrDatPub() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrDatPub)
  SharedDtor();
}

void XmsgImHlrUsrDatPub::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrUsrDatPub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrDatPub::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrDatPub& XmsgImHlrUsrDatPub::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrDatPub();
  return *internal_default_instance();
}

XmsgImHlrUsrDatPub* XmsgImHlrUsrDatPub::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrDatPub* n = new XmsgImHlrUsrDatPub;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrDatPub::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrDatPub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrDatPub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrDatPub)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDatPub.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          XmsgImHlrUsrDatPub_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrDatPub_InfoEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDatPub.InfoEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrDatPub.InfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrDatPub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrDatPub)
  return false;
#undef DO_
}

void XmsgImHlrUsrDatPub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrDatPub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrUsrDatPub.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPub.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPub.InfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrDatPub)
}

::google::protobuf::uint8* XmsgImHlrUsrDatPub::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrDatPub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrUsrDatPub.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPub.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrDatPub.InfoEntry.value");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrDatPub)
  return target;
}

size_t XmsgImHlrUsrDatPub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrDatPub)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> info = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrDatPub_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrDatPub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrDatPub)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrDatPub* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrDatPub>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrDatPub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrDatPub)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrDatPub::MergeFrom(const XmsgImHlrUsrDatPub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrDatPub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void XmsgImHlrUsrDatPub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrDatPub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrDatPub::CopyFrom(const XmsgImHlrUsrDatPub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrDatPub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrDatPub::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrDatPub::Swap(XmsgImHlrUsrDatPub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrDatPub::InternalSwap(XmsgImHlrUsrDatPub* other) {
  using std::swap;
  info_.Swap(&other->info_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrDatPub::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse() {}
XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[5];
}
void XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrInfoQueryReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrInfoQueryReq::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrInfoQueryReq::XmsgImHlrUsrInfoQueryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrInfoQueryReq)
}
XmsgImHlrUsrInfoQueryReq::XmsgImHlrUsrInfoQueryReq(const XmsgImHlrUsrInfoQueryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrInfoQueryReq)
}

void XmsgImHlrUsrInfoQueryReq::SharedCtor() {
  _cached_size_ = 0;
}

XmsgImHlrUsrInfoQueryReq::~XmsgImHlrUsrInfoQueryReq() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrInfoQueryReq)
  SharedDtor();
}

void XmsgImHlrUsrInfoQueryReq::SharedDtor() {
}

void XmsgImHlrUsrInfoQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrInfoQueryReq::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrInfoQueryReq& XmsgImHlrUsrInfoQueryReq::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryReq();
  return *internal_default_instance();
}

XmsgImHlrUsrInfoQueryReq* XmsgImHlrUsrInfoQueryReq::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrInfoQueryReq* n = new XmsgImHlrUsrInfoQueryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrInfoQueryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrInfoQueryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrInfoQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrInfoQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoQueryReq.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoQueryReq.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrInfoQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrInfoQueryReq)
  return false;
#undef DO_
}

void XmsgImHlrUsrInfoQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrInfoQueryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> ext = 1;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryReq.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryReq.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrInfoQueryReq)
}

::google::protobuf::uint8* XmsgImHlrUsrInfoQueryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrInfoQueryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> ext = 1;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryReq.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryReq.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrInfoQueryReq)
  return target;
}

size_t XmsgImHlrUsrInfoQueryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrInfoQueryReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> ext = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryReq_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrInfoQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrInfoQueryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrInfoQueryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrInfoQueryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrInfoQueryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrInfoQueryReq)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrInfoQueryReq::MergeFrom(const XmsgImHlrUsrInfoQueryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrInfoQueryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
}

void XmsgImHlrUsrInfoQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrInfoQueryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrInfoQueryReq::CopyFrom(const XmsgImHlrUsrInfoQueryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrInfoQueryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrInfoQueryReq::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrInfoQueryReq::Swap(XmsgImHlrUsrInfoQueryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrInfoQueryReq::InternalSwap(XmsgImHlrUsrInfoQueryReq* other) {
  using std::swap;
  ext_.Swap(&other->ext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrInfoQueryReq::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse() {}
XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[7];
}
void XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrInfoQueryRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrInfoQueryRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrInfoQueryRsp::XmsgImHlrUsrInfoQueryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrInfoQueryRsp)
}
XmsgImHlrUsrInfoQueryRsp::XmsgImHlrUsrInfoQueryRsp(const XmsgImHlrUsrInfoQueryRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrInfoQueryRsp)
}

void XmsgImHlrUsrInfoQueryRsp::SharedCtor() {
  _cached_size_ = 0;
}

XmsgImHlrUsrInfoQueryRsp::~XmsgImHlrUsrInfoQueryRsp() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrInfoQueryRsp)
  SharedDtor();
}

void XmsgImHlrUsrInfoQueryRsp::SharedDtor() {
}

void XmsgImHlrUsrInfoQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrInfoQueryRsp::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrInfoQueryRsp& XmsgImHlrUsrInfoQueryRsp::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoQueryRsp();
  return *internal_default_instance();
}

XmsgImHlrUsrInfoQueryRsp* XmsgImHlrUsrInfoQueryRsp::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrInfoQueryRsp* n = new XmsgImHlrUsrInfoQueryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrInfoQueryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrInfoQueryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrInfoQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrInfoQueryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoQueryRsp.InfoEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoQueryRsp.InfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrInfoQueryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrInfoQueryRsp)
  return false;
#undef DO_
}

void XmsgImHlrUsrInfoQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrInfoQueryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> info = 1;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryRsp.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryRsp.InfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrInfoQueryRsp)
}

::google::protobuf::uint8* XmsgImHlrUsrInfoQueryRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrInfoQueryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> info = 1;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryRsp.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoQueryRsp.InfoEntry.value");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrInfoQueryRsp)
  return target;
}

size_t XmsgImHlrUsrInfoQueryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrInfoQueryRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> info = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoQueryRsp_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrInfoQueryRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrInfoQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrInfoQueryRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrInfoQueryRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrInfoQueryRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrInfoQueryRsp)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrInfoQueryRsp::MergeFrom(const XmsgImHlrUsrInfoQueryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrInfoQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void XmsgImHlrUsrInfoQueryRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrInfoQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrInfoQueryRsp::CopyFrom(const XmsgImHlrUsrInfoQueryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrInfoQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrInfoQueryRsp::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrInfoQueryRsp::Swap(XmsgImHlrUsrInfoQueryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrInfoQueryRsp::InternalSwap(XmsgImHlrUsrInfoQueryRsp* other) {
  using std::swap;
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrInfoQueryRsp::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse() {}
XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[9];
}
void XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrInfoUpdateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrInfoUpdateReq::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrInfoUpdateReq::XmsgImHlrUsrInfoUpdateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrInfoUpdateReq)
}
XmsgImHlrUsrInfoUpdateReq::XmsgImHlrUsrInfoUpdateReq(const XmsgImHlrUsrInfoUpdateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrInfoUpdateReq)
}

void XmsgImHlrUsrInfoUpdateReq::SharedCtor() {
  _cached_size_ = 0;
}

XmsgImHlrUsrInfoUpdateReq::~XmsgImHlrUsrInfoUpdateReq() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrInfoUpdateReq)
  SharedDtor();
}

void XmsgImHlrUsrInfoUpdateReq::SharedDtor() {
}

void XmsgImHlrUsrInfoUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrInfoUpdateReq::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrInfoUpdateReq& XmsgImHlrUsrInfoUpdateReq::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateReq();
  return *internal_default_instance();
}

XmsgImHlrUsrInfoUpdateReq* XmsgImHlrUsrInfoUpdateReq::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrInfoUpdateReq* n = new XmsgImHlrUsrInfoUpdateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrInfoUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrInfoUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrInfoUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrInfoUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoUpdateReq.InfoEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoUpdateReq.InfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrInfoUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrInfoUpdateReq)
  return false;
#undef DO_
}

void XmsgImHlrUsrInfoUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrInfoUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> info = 1;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateReq.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateReq.InfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrInfoUpdateReq)
}

::google::protobuf::uint8* XmsgImHlrUsrInfoUpdateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrInfoUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> info = 1;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateReq.InfoEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateReq.InfoEntry.value");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrInfoUpdateReq)
  return target;
}

size_t XmsgImHlrUsrInfoUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrInfoUpdateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> info = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateReq_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrInfoUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrInfoUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrInfoUpdateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrInfoUpdateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrInfoUpdateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrInfoUpdateReq)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrInfoUpdateReq::MergeFrom(const XmsgImHlrUsrInfoUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrInfoUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void XmsgImHlrUsrInfoUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrInfoUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrInfoUpdateReq::CopyFrom(const XmsgImHlrUsrInfoUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrInfoUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrInfoUpdateReq::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrInfoUpdateReq::Swap(XmsgImHlrUsrInfoUpdateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrInfoUpdateReq::InternalSwap(XmsgImHlrUsrInfoUpdateReq* other) {
  using std::swap;
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrInfoUpdateReq::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse() {}
XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::MergeFrom(const XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[11];
}
void XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImHlrUsrInfoUpdateRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrUsrInfoUpdateRsp::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrUsrInfoUpdateRsp::XmsgImHlrUsrInfoUpdateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrUsrInfoUpdateRsp)
}
XmsgImHlrUsrInfoUpdateRsp::XmsgImHlrUsrInfoUpdateRsp(const XmsgImHlrUsrInfoUpdateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrUsrInfoUpdateRsp)
}

void XmsgImHlrUsrInfoUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
}

XmsgImHlrUsrInfoUpdateRsp::~XmsgImHlrUsrInfoUpdateRsp() {
  // @@protoc_insertion_point(destructor:XmsgImHlrUsrInfoUpdateRsp)
  SharedDtor();
}

void XmsgImHlrUsrInfoUpdateRsp::SharedDtor() {
}

void XmsgImHlrUsrInfoUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrUsrInfoUpdateRsp::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrUsrInfoUpdateRsp& XmsgImHlrUsrInfoUpdateRsp::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::InitDefaultsXmsgImHlrUsrInfoUpdateRsp();
  return *internal_default_instance();
}

XmsgImHlrUsrInfoUpdateRsp* XmsgImHlrUsrInfoUpdateRsp::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrUsrInfoUpdateRsp* n = new XmsgImHlrUsrInfoUpdateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrUsrInfoUpdateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrUsrInfoUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  _internal_metadata_.Clear();
}

bool XmsgImHlrUsrInfoUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrUsrInfoUpdateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrUsrInfoUpdateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrUsrInfoUpdateRsp)
  return false;
#undef DO_
}

void XmsgImHlrUsrInfoUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrUsrInfoUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> ext = 1;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrUsrInfoUpdateRsp)
}

::google::protobuf::uint8* XmsgImHlrUsrInfoUpdateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrUsrInfoUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> ext = 1;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImHlrUsrInfoUpdateRsp.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrUsrInfoUpdateRsp)
  return target;
}

size_t XmsgImHlrUsrInfoUpdateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrUsrInfoUpdateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> ext = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImHlrUsrInfoUpdateRsp_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrUsrInfoUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrUsrInfoUpdateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrUsrInfoUpdateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrUsrInfoUpdateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrUsrInfoUpdateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrUsrInfoUpdateRsp)
    MergeFrom(*source);
  }
}

void XmsgImHlrUsrInfoUpdateRsp::MergeFrom(const XmsgImHlrUsrInfoUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrUsrInfoUpdateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
}

void XmsgImHlrUsrInfoUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrUsrInfoUpdateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrUsrInfoUpdateRsp::CopyFrom(const XmsgImHlrUsrInfoUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrUsrInfoUpdateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrUsrInfoUpdateRsp::IsInitialized() const {
  return true;
}

void XmsgImHlrUsrInfoUpdateRsp::Swap(XmsgImHlrUsrInfoUpdateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrUsrInfoUpdateRsp::InternalSwap(XmsgImHlrUsrInfoUpdateRsp* other) {
  using std::swap;
  ext_.Swap(&other->ext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrUsrInfoUpdateRsp::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dusr_2ddat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
