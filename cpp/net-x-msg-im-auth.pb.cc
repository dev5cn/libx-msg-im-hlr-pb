// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-x-msg-im-auth.proto

#include "net-x-msg-im-auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImAuthSimpleReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthSimpleReq>
      _instance;
} _XmsgImAuthSimpleReq_default_instance_;
class XmsgImAuthSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse>
      _instance;
} _XmsgImAuthSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImAuthSimpleRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthSimpleRsp>
      _instance;
} _XmsgImAuthSimpleRsp_default_instance_;
class XmsgImAuthRegSimpleReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthRegSimpleReq>
      _instance;
} _XmsgImAuthRegSimpleReq_default_instance_;
class XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse>
      _instance;
} _XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImAuthRegSimpleRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthRegSimpleRsp>
      _instance;
} _XmsgImAuthRegSimpleRsp_default_instance_;
class XmsgImClientDeviceInfo_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImClientDeviceInfo_ExtEntry_DoNotUse>
      _instance;
} _XmsgImClientDeviceInfo_ExtEntry_DoNotUse_default_instance_;
class XmsgImClientDeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImClientDeviceInfo>
      _instance;
} _XmsgImClientDeviceInfo_default_instance_;
class XmsgImClientServiceAddress_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImClientServiceAddress_ExtEntry_DoNotUse>
      _instance;
} _XmsgImClientServiceAddress_ExtEntry_DoNotUse_default_instance_;
class XmsgImClientServiceAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImClientServiceAddress>
      _instance;
} _XmsgImClientServiceAddress_default_instance_;
namespace protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto {
void InitDefaultsXmsgImAuthSimpleReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfo();
  {
    void* ptr = &::_XmsgImAuthSimpleReq_default_instance_;
    new (ptr) ::XmsgImAuthSimpleReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthSimpleReq::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthSimpleReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthSimpleReqImpl);
}

void InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthSimpleRsp_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse();
  }
  ::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImAuthSimpleRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientServiceAddress();
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImAuthSimpleRsp_default_instance_;
    new (ptr) ::XmsgImAuthSimpleRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthSimpleRsp::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthSimpleRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthSimpleRspImpl);
}

void InitDefaultsXmsgImAuthRegSimpleReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfo();
  {
    void* ptr = &::_XmsgImAuthRegSimpleReq_default_instance_;
    new (ptr) ::XmsgImAuthRegSimpleReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthRegSimpleReq::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthRegSimpleReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthRegSimpleReqImpl);
}

void InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse();
  }
  ::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImAuthRegSimpleRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImAuthRegSimpleRsp_default_instance_;
    new (ptr) ::XmsgImAuthRegSimpleRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthRegSimpleRsp::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthRegSimpleRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthRegSimpleRspImpl);
}

void InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImClientDeviceInfo_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImClientDeviceInfo_ExtEntry_DoNotUse();
  }
  ::XmsgImClientDeviceInfo_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImClientDeviceInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImClientDeviceInfo_default_instance_;
    new (ptr) ::XmsgImClientDeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImClientDeviceInfo::InitAsDefaultInstance();
}

void InitDefaultsXmsgImClientDeviceInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImClientDeviceInfoImpl);
}

void InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImClientServiceAddress_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImClientServiceAddress_ExtEntry_DoNotUse();
  }
  ::XmsgImClientServiceAddress_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImClientServiceAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImClientServiceAddress_default_instance_;
    new (ptr) ::XmsgImClientServiceAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImClientServiceAddress::InitAsDefaultInstance();
}

void InitDefaultsXmsgImClientServiceAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImClientServiceAddressImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleReq, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleReq, salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleReq, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleReq, dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, expired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, apaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, fsaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthSimpleRsp, ext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleReq, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleReq, salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleReq, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleReq, dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthRegSimpleRsp, ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo, plat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo, did_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientDeviceInfo, ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress_ExtEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress_ExtEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImClientServiceAddress, ext_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgImAuthSimpleReq)},
  { 9, 16, sizeof(::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse)},
  { 18, -1, sizeof(::XmsgImAuthSimpleRsp)},
  { 30, -1, sizeof(::XmsgImAuthRegSimpleReq)},
  { 39, 46, sizeof(::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse)},
  { 48, -1, sizeof(::XmsgImAuthRegSimpleRsp)},
  { 55, 62, sizeof(::XmsgImClientDeviceInfo_ExtEntry_DoNotUse)},
  { 64, -1, sizeof(::XmsgImClientDeviceInfo)},
  { 73, 80, sizeof(::XmsgImClientServiceAddress_ExtEntry_DoNotUse)},
  { 82, -1, sizeof(::XmsgImClientServiceAddress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthSimpleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthSimpleRsp_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthSimpleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthRegSimpleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthRegSimpleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImClientDeviceInfo_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImClientDeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImClientServiceAddress_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImClientServiceAddress_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "net-x-msg-im-auth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027net-x-msg-im-auth.proto\"d\n\023XmsgImAuthS"
      "impleReq\022\013\n\003usr\030\001 \001(\t\022\014\n\004salt\030\002 \001(\t\022\014\n\004s"
      "ign\030\003 \001(\t\022$\n\003dev\030\004 \001(\0132\027.XmsgImClientDev"
      "iceInfo\"\204\002\n\023XmsgImAuthSimpleRsp\022\r\n\005token"
      "\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\017\n\007expired\030\003 \001(\004\022"
      "+\n\006apAddr\030\004 \003(\0132\033.XmsgImClientServiceAdd"
      "ress\022+\n\006fsAddr\030\005 \003(\0132\033.XmsgImClientServi"
      "ceAddress\022\013\n\003cgt\030\007 \001(\t\022*\n\003ext\030\010 \003(\0132\035.Xm"
      "sgImAuthSimpleRsp.ExtEntry\032*\n\010ExtEntry\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"f\n\026XmsgIm"
      "AuthRegSimpleReq\022\013\n\003usr\030\001 \001(\t\022\014\n\004salt\030\002 "
      "\001(\t\022\013\n\003pwd\030\003 \001(\t\022$\n\003dev\030\004 \001(\0132\027.XmsgImCl"
      "ientDeviceInfo\"\200\001\n\026XmsgImAuthRegSimpleRs"
      "p\022\013\n\003cgt\030\001 \001(\t\022-\n\003ext\030\002 \003(\0132 .XmsgImAuth"
      "RegSimpleRsp.ExtEntry\032*\n\010ExtEntry\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\233\001\n\026XmsgImClie"
      "ntDeviceInfo\022\014\n\004plat\030\001 \001(\t\022\013\n\003did\030\002 \001(\t\022"
      "\013\n\003ver\030\003 \001(\t\022-\n\003ext\030\004 \003(\0132 .XmsgImClient"
      "DeviceInfo.ExtEntry\032*\n\010ExtEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\264\001\n\032XmsgImClient"
      "ServiceAddress\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r"
      "\022\016\n\006weight\030\003 \001(\r\022\r\n\005proto\030\004 \003(\t\0221\n\003ext\030\005"
      " \003(\0132$.XmsgImClientServiceAddress.ExtEnt"
      "ry\032*\n\010ExtEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\t:\0028\001B\030\n\010x.msg.pbB\014XmsgImAuthPbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1000);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net-x-msg-im-auth.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto

// ===================================================================

void XmsgImAuthSimpleReq::InitAsDefaultInstance() {
  ::_XmsgImAuthSimpleReq_default_instance_._instance.get_mutable()->dev_ = const_cast< ::XmsgImClientDeviceInfo*>(
      ::XmsgImClientDeviceInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthSimpleReq::kUsrFieldNumber;
const int XmsgImAuthSimpleReq::kSaltFieldNumber;
const int XmsgImAuthSimpleReq::kSignFieldNumber;
const int XmsgImAuthSimpleReq::kDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthSimpleReq::XmsgImAuthSimpleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthSimpleReq)
}
XmsgImAuthSimpleReq::XmsgImAuthSimpleReq(const XmsgImAuthSimpleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.has_dev()) {
    dev_ = new ::XmsgImClientDeviceInfo(*from.dev_);
  } else {
    dev_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthSimpleReq)
}

void XmsgImAuthSimpleReq::SharedCtor() {
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_ = NULL;
  _cached_size_ = 0;
}

XmsgImAuthSimpleReq::~XmsgImAuthSimpleReq() {
  // @@protoc_insertion_point(destructor:XmsgImAuthSimpleReq)
  SharedDtor();
}

void XmsgImAuthSimpleReq::SharedDtor() {
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dev_;
}

void XmsgImAuthSimpleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthSimpleReq::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthSimpleReq& XmsgImAuthSimpleReq::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleReq();
  return *internal_default_instance();
}

XmsgImAuthSimpleReq* XmsgImAuthSimpleReq::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthSimpleReq* n = new XmsgImAuthSimpleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthSimpleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) {
    delete dev_;
  }
  dev_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgImAuthSimpleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthSimpleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string usr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleReq.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string salt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->salt().data(), static_cast<int>(this->salt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleReq.salt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleReq.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImClientDeviceInfo dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthSimpleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthSimpleReq)
  return false;
#undef DO_
}

void XmsgImAuthSimpleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr = 1;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usr(), output);
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->salt(), output);
  }

  // string sign = 3;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign(), output);
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dev_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthSimpleReq)
}

::google::protobuf::uint8* XmsgImAuthSimpleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr = 1;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usr(), target);
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->salt(), target);
  }

  // string sign = 3;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleReq.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->dev_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthSimpleReq)
  return target;
}

size_t XmsgImAuthSimpleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthSimpleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string usr = 1;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->salt());
  }

  // string sign = 3;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthSimpleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthSimpleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthSimpleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthSimpleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthSimpleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthSimpleReq)
    MergeFrom(*source);
  }
}

void XmsgImAuthSimpleReq::MergeFrom(const XmsgImAuthSimpleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthSimpleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.has_dev()) {
    mutable_dev()->::XmsgImClientDeviceInfo::MergeFrom(from.dev());
  }
}

void XmsgImAuthSimpleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthSimpleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthSimpleReq::CopyFrom(const XmsgImAuthSimpleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthSimpleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthSimpleReq::IsInitialized() const {
  return true;
}

void XmsgImAuthSimpleReq::Swap(XmsgImAuthSimpleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthSimpleReq::InternalSwap(XmsgImAuthSimpleReq* other) {
  using std::swap;
  usr_.Swap(&other->usr_);
  salt_.Swap(&other->salt_);
  sign_.Swap(&other->sign_);
  swap(dev_, other->dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthSimpleReq::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse() {}
XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::XmsgImAuthSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::MergeFrom(const XmsgImAuthSimpleRsp_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[1];
}
void XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImAuthSimpleRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthSimpleRsp::kTokenFieldNumber;
const int XmsgImAuthSimpleRsp::kSecretFieldNumber;
const int XmsgImAuthSimpleRsp::kExpiredFieldNumber;
const int XmsgImAuthSimpleRsp::kApAddrFieldNumber;
const int XmsgImAuthSimpleRsp::kFsAddrFieldNumber;
const int XmsgImAuthSimpleRsp::kCgtFieldNumber;
const int XmsgImAuthSimpleRsp::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthSimpleRsp::XmsgImAuthSimpleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthSimpleRsp)
}
XmsgImAuthSimpleRsp::XmsgImAuthSimpleRsp(const XmsgImAuthSimpleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      apaddr_(from.apaddr_),
      fsaddr_(from.fsaddr_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  expired_ = from.expired_;
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthSimpleRsp)
}

void XmsgImAuthSimpleRsp::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expired_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

XmsgImAuthSimpleRsp::~XmsgImAuthSimpleRsp() {
  // @@protoc_insertion_point(destructor:XmsgImAuthSimpleRsp)
  SharedDtor();
}

void XmsgImAuthSimpleRsp::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthSimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthSimpleRsp::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthSimpleRsp& XmsgImAuthSimpleRsp::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleRsp();
  return *internal_default_instance();
}

XmsgImAuthSimpleRsp* XmsgImAuthSimpleRsp::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthSimpleRsp* n = new XmsgImAuthSimpleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthSimpleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apaddr_.Clear();
  fsaddr_.Clear();
  ext_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expired_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool XmsgImAuthSimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthSimpleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleRsp.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleRsp.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expired = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImClientServiceAddress apAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_apaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImClientServiceAddress fsAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fsaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleRsp.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ext = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          XmsgImAuthSimpleRsp_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImAuthSimpleRsp_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleRsp.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthSimpleRsp.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthSimpleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthSimpleRsp)
  return false;
#undef DO_
}

void XmsgImAuthSimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secret(), output);
  }

  // uint64 expired = 3;
  if (this->expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expired(), output);
  }

  // repeated .XmsgImClientServiceAddress apAddr = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apaddr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apaddr(static_cast<int>(i)), output);
  }

  // repeated .XmsgImClientServiceAddress fsAddr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fsaddr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fsaddr(static_cast<int>(i)), output);
  }

  // string cgt = 7;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cgt(), output);
  }

  // map<string, string> ext = 8;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthSimpleRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthSimpleRsp.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthSimpleRsp)
}

::google::protobuf::uint8* XmsgImAuthSimpleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }

  // uint64 expired = 3;
  if (this->expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expired(), target);
  }

  // repeated .XmsgImClientServiceAddress apAddr = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apaddr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->apaddr(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgImClientServiceAddress fsAddr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fsaddr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->fsaddr(static_cast<int>(i)), deterministic, target);
  }

  // string cgt = 7;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthSimpleRsp.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cgt(), target);
  }

  // map<string, string> ext = 8;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthSimpleRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthSimpleRsp.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthSimpleRsp)
  return target;
}

size_t XmsgImAuthSimpleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthSimpleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImClientServiceAddress apAddr = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->apaddr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apaddr(static_cast<int>(i)));
    }
  }

  // repeated .XmsgImClientServiceAddress fsAddr = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->fsaddr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fsaddr(static_cast<int>(i)));
    }
  }

  // map<string, string> ext = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  // string cgt = 7;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // uint64 expired = 3;
  if (this->expired() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expired());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthSimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthSimpleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthSimpleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthSimpleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthSimpleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthSimpleRsp)
    MergeFrom(*source);
  }
}

void XmsgImAuthSimpleRsp::MergeFrom(const XmsgImAuthSimpleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthSimpleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apaddr_.MergeFrom(from.apaddr_);
  fsaddr_.MergeFrom(from.fsaddr_);
  ext_.MergeFrom(from.ext_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.expired() != 0) {
    set_expired(from.expired());
  }
}

void XmsgImAuthSimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthSimpleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthSimpleRsp::CopyFrom(const XmsgImAuthSimpleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthSimpleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthSimpleRsp::IsInitialized() const {
  return true;
}

void XmsgImAuthSimpleRsp::Swap(XmsgImAuthSimpleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthSimpleRsp::InternalSwap(XmsgImAuthSimpleRsp* other) {
  using std::swap;
  apaddr_.InternalSwap(&other->apaddr_);
  fsaddr_.InternalSwap(&other->fsaddr_);
  ext_.Swap(&other->ext_);
  token_.Swap(&other->token_);
  secret_.Swap(&other->secret_);
  cgt_.Swap(&other->cgt_);
  swap(expired_, other->expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthSimpleRsp::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthRegSimpleReq::InitAsDefaultInstance() {
  ::_XmsgImAuthRegSimpleReq_default_instance_._instance.get_mutable()->dev_ = const_cast< ::XmsgImClientDeviceInfo*>(
      ::XmsgImClientDeviceInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthRegSimpleReq::kUsrFieldNumber;
const int XmsgImAuthRegSimpleReq::kSaltFieldNumber;
const int XmsgImAuthRegSimpleReq::kPwdFieldNumber;
const int XmsgImAuthRegSimpleReq::kDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthRegSimpleReq::XmsgImAuthRegSimpleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthRegSimpleReq)
}
XmsgImAuthRegSimpleReq::XmsgImAuthRegSimpleReq(const XmsgImAuthRegSimpleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.has_dev()) {
    dev_ = new ::XmsgImClientDeviceInfo(*from.dev_);
  } else {
    dev_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthRegSimpleReq)
}

void XmsgImAuthRegSimpleReq::SharedCtor() {
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_ = NULL;
  _cached_size_ = 0;
}

XmsgImAuthRegSimpleReq::~XmsgImAuthRegSimpleReq() {
  // @@protoc_insertion_point(destructor:XmsgImAuthRegSimpleReq)
  SharedDtor();
}

void XmsgImAuthRegSimpleReq::SharedDtor() {
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dev_;
}

void XmsgImAuthRegSimpleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthRegSimpleReq::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthRegSimpleReq& XmsgImAuthRegSimpleReq::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleReq();
  return *internal_default_instance();
}

XmsgImAuthRegSimpleReq* XmsgImAuthRegSimpleReq::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthRegSimpleReq* n = new XmsgImAuthRegSimpleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthRegSimpleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthRegSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) {
    delete dev_;
  }
  dev_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgImAuthRegSimpleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthRegSimpleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string usr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleReq.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string salt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->salt().data(), static_cast<int>(this->salt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleReq.salt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleReq.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImClientDeviceInfo dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthRegSimpleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthRegSimpleReq)
  return false;
#undef DO_
}

void XmsgImAuthRegSimpleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthRegSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr = 1;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usr(), output);
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->salt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dev_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthRegSimpleReq)
}

::google::protobuf::uint8* XmsgImAuthRegSimpleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthRegSimpleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr = 1;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usr(), target);
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->salt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleReq.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->dev_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthRegSimpleReq)
  return target;
}

size_t XmsgImAuthRegSimpleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthRegSimpleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string usr = 1;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string salt = 2;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->salt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // .XmsgImClientDeviceInfo dev = 4;
  if (this->has_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthRegSimpleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthRegSimpleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthRegSimpleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthRegSimpleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthRegSimpleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthRegSimpleReq)
    MergeFrom(*source);
  }
}

void XmsgImAuthRegSimpleReq::MergeFrom(const XmsgImAuthRegSimpleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthRegSimpleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.has_dev()) {
    mutable_dev()->::XmsgImClientDeviceInfo::MergeFrom(from.dev());
  }
}

void XmsgImAuthRegSimpleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthRegSimpleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthRegSimpleReq::CopyFrom(const XmsgImAuthRegSimpleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthRegSimpleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthRegSimpleReq::IsInitialized() const {
  return true;
}

void XmsgImAuthRegSimpleReq::Swap(XmsgImAuthRegSimpleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthRegSimpleReq::InternalSwap(XmsgImAuthRegSimpleReq* other) {
  using std::swap;
  usr_.Swap(&other->usr_);
  salt_.Swap(&other->salt_);
  pwd_.Swap(&other->pwd_);
  swap(dev_, other->dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthRegSimpleReq::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse() {}
XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::MergeFrom(const XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[4];
}
void XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImAuthRegSimpleRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthRegSimpleRsp::kCgtFieldNumber;
const int XmsgImAuthRegSimpleRsp::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthRegSimpleRsp::XmsgImAuthRegSimpleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthRegSimpleRsp)
}
XmsgImAuthRegSimpleRsp::XmsgImAuthRegSimpleRsp(const XmsgImAuthRegSimpleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthRegSimpleRsp)
}

void XmsgImAuthRegSimpleRsp::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthRegSimpleRsp::~XmsgImAuthRegSimpleRsp() {
  // @@protoc_insertion_point(destructor:XmsgImAuthRegSimpleRsp)
  SharedDtor();
}

void XmsgImAuthRegSimpleRsp::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthRegSimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthRegSimpleRsp::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthRegSimpleRsp& XmsgImAuthRegSimpleRsp::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleRsp();
  return *internal_default_instance();
}

XmsgImAuthRegSimpleRsp* XmsgImAuthRegSimpleRsp::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthRegSimpleRsp* n = new XmsgImAuthRegSimpleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthRegSimpleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthRegSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthRegSimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthRegSimpleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleRsp.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ext = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleRsp.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthRegSimpleRsp.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthRegSimpleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthRegSimpleRsp)
  return false;
#undef DO_
}

void XmsgImAuthRegSimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthRegSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleRsp.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // map<string, string> ext = 2;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthRegSimpleRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthRegSimpleRsp.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthRegSimpleRsp)
}

::google::protobuf::uint8* XmsgImAuthRegSimpleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthRegSimpleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthRegSimpleRsp.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // map<string, string> ext = 2;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthRegSimpleRsp.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthRegSimpleRsp.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthRegSimpleRsp)
  return target;
}

size_t XmsgImAuthRegSimpleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthRegSimpleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> ext = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthRegSimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthRegSimpleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthRegSimpleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthRegSimpleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthRegSimpleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthRegSimpleRsp)
    MergeFrom(*source);
  }
}

void XmsgImAuthRegSimpleRsp::MergeFrom(const XmsgImAuthRegSimpleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthRegSimpleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
}

void XmsgImAuthRegSimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthRegSimpleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthRegSimpleRsp::CopyFrom(const XmsgImAuthRegSimpleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthRegSimpleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthRegSimpleRsp::IsInitialized() const {
  return true;
}

void XmsgImAuthRegSimpleRsp::Swap(XmsgImAuthRegSimpleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthRegSimpleRsp::InternalSwap(XmsgImAuthRegSimpleRsp* other) {
  using std::swap;
  ext_.Swap(&other->ext_);
  cgt_.Swap(&other->cgt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthRegSimpleRsp::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImClientDeviceInfo_ExtEntry_DoNotUse::XmsgImClientDeviceInfo_ExtEntry_DoNotUse() {}
XmsgImClientDeviceInfo_ExtEntry_DoNotUse::XmsgImClientDeviceInfo_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImClientDeviceInfo_ExtEntry_DoNotUse::MergeFrom(const XmsgImClientDeviceInfo_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImClientDeviceInfo_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[6];
}
void XmsgImClientDeviceInfo_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImClientDeviceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImClientDeviceInfo::kPlatFieldNumber;
const int XmsgImClientDeviceInfo::kDidFieldNumber;
const int XmsgImClientDeviceInfo::kVerFieldNumber;
const int XmsgImClientDeviceInfo::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImClientDeviceInfo::XmsgImClientDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImClientDeviceInfo)
}
XmsgImClientDeviceInfo::XmsgImClientDeviceInfo(const XmsgImClientDeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  plat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plat().size() > 0) {
    plat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plat_);
  }
  did_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.did().size() > 0) {
    did_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.did_);
  }
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ver().size() > 0) {
    ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImClientDeviceInfo)
}

void XmsgImClientDeviceInfo::SharedCtor() {
  plat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImClientDeviceInfo::~XmsgImClientDeviceInfo() {
  // @@protoc_insertion_point(destructor:XmsgImClientDeviceInfo)
  SharedDtor();
}

void XmsgImClientDeviceInfo::SharedDtor() {
  plat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImClientDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImClientDeviceInfo::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImClientDeviceInfo& XmsgImClientDeviceInfo::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfo();
  return *internal_default_instance();
}

XmsgImClientDeviceInfo* XmsgImClientDeviceInfo::New(::google::protobuf::Arena* arena) const {
  XmsgImClientDeviceInfo* n = new XmsgImClientDeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImClientDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImClientDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  plat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImClientDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImClientDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string plat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plat().data(), static_cast<int>(this->plat().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientDeviceInfo.plat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string did = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->did().data(), static_cast<int>(this->did().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientDeviceInfo.did"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ver().data(), static_cast<int>(this->ver().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientDeviceInfo.ver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ext = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          XmsgImClientDeviceInfo_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImClientDeviceInfo_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientDeviceInfo.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientDeviceInfo.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImClientDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImClientDeviceInfo)
  return false;
#undef DO_
}

void XmsgImClientDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImClientDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plat = 1;
  if (this->plat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plat().data(), static_cast<int>(this->plat().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.plat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plat(), output);
  }

  // string did = 2;
  if (this->did().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->did().data(), static_cast<int>(this->did().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.did");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->did(), output);
  }

  // string ver = 3;
  if (this->ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ver().data(), static_cast<int>(this->ver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ver(), output);
  }

  // map<string, string> ext = 4;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientDeviceInfo.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientDeviceInfo.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImClientDeviceInfo_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImClientDeviceInfo_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImClientDeviceInfo)
}

::google::protobuf::uint8* XmsgImClientDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImClientDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plat = 1;
  if (this->plat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plat().data(), static_cast<int>(this->plat().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.plat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plat(), target);
  }

  // string did = 2;
  if (this->did().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->did().data(), static_cast<int>(this->did().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.did");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->did(), target);
  }

  // string ver = 3;
  if (this->ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ver().data(), static_cast<int>(this->ver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientDeviceInfo.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ver(), target);
  }

  // map<string, string> ext = 4;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientDeviceInfo.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientDeviceInfo.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImClientDeviceInfo_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImClientDeviceInfo_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImClientDeviceInfo)
  return target;
}

size_t XmsgImClientDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImClientDeviceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> ext = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImClientDeviceInfo_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string plat = 1;
  if (this->plat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plat());
  }

  // string did = 2;
  if (this->did().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->did());
  }

  // string ver = 3;
  if (this->ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImClientDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImClientDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImClientDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImClientDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImClientDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImClientDeviceInfo)
    MergeFrom(*source);
  }
}

void XmsgImClientDeviceInfo::MergeFrom(const XmsgImClientDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImClientDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
  if (from.plat().size() > 0) {

    plat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plat_);
  }
  if (from.did().size() > 0) {

    did_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.did_);
  }
  if (from.ver().size() > 0) {

    ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
  }
}

void XmsgImClientDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImClientDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImClientDeviceInfo::CopyFrom(const XmsgImClientDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImClientDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImClientDeviceInfo::IsInitialized() const {
  return true;
}

void XmsgImClientDeviceInfo::Swap(XmsgImClientDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImClientDeviceInfo::InternalSwap(XmsgImClientDeviceInfo* other) {
  using std::swap;
  ext_.Swap(&other->ext_);
  plat_.Swap(&other->plat_);
  did_.Swap(&other->did_);
  ver_.Swap(&other->ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImClientDeviceInfo::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

XmsgImClientServiceAddress_ExtEntry_DoNotUse::XmsgImClientServiceAddress_ExtEntry_DoNotUse() {}
XmsgImClientServiceAddress_ExtEntry_DoNotUse::XmsgImClientServiceAddress_ExtEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImClientServiceAddress_ExtEntry_DoNotUse::MergeFrom(const XmsgImClientServiceAddress_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImClientServiceAddress_ExtEntry_DoNotUse::GetMetadata() const {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[8];
}
void XmsgImClientServiceAddress_ExtEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImClientServiceAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImClientServiceAddress::kIpFieldNumber;
const int XmsgImClientServiceAddress::kPortFieldNumber;
const int XmsgImClientServiceAddress::kWeightFieldNumber;
const int XmsgImClientServiceAddress::kProtoFieldNumber;
const int XmsgImClientServiceAddress::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImClientServiceAddress::XmsgImClientServiceAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientServiceAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImClientServiceAddress)
}
XmsgImClientServiceAddress::XmsgImClientServiceAddress(const XmsgImClientServiceAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      proto_(from.proto_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&port_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:XmsgImClientServiceAddress)
}

void XmsgImClientServiceAddress::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&port_)) + sizeof(weight_));
  _cached_size_ = 0;
}

XmsgImClientServiceAddress::~XmsgImClientServiceAddress() {
  // @@protoc_insertion_point(destructor:XmsgImClientServiceAddress)
  SharedDtor();
}

void XmsgImClientServiceAddress::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImClientServiceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImClientServiceAddress::descriptor() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImClientServiceAddress& XmsgImClientServiceAddress::default_instance() {
  ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientServiceAddress();
  return *internal_default_instance();
}

XmsgImClientServiceAddress* XmsgImClientServiceAddress::New(::google::protobuf::Arena* arena) const {
  XmsgImClientServiceAddress* n = new XmsgImClientServiceAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImClientServiceAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImClientServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_.Clear();
  ext_.Clear();
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&port_)) + sizeof(weight_));
  _internal_metadata_.Clear();
}

bool XmsgImClientServiceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImClientServiceAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientServiceAddress.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string proto = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto(this->proto_size() - 1).data(),
            static_cast<int>(this->proto(this->proto_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientServiceAddress.proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          XmsgImClientServiceAddress_ExtEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImClientServiceAddress_ExtEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientServiceAddress.ExtEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImClientServiceAddress.ExtEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImClientServiceAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImClientServiceAddress)
  return false;
#undef DO_
}

void XmsgImClientServiceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImClientServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientServiceAddress.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // uint32 weight = 3;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weight(), output);
  }

  // repeated string proto = 4;
  for (int i = 0, n = this->proto_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto(i).data(), static_cast<int>(this->proto(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientServiceAddress.proto");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->proto(i), output);
  }

  // map<string, string> ext = 5;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientServiceAddress.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientServiceAddress.ExtEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImClientServiceAddress_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImClientServiceAddress_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImClientServiceAddress)
}

::google::protobuf::uint8* XmsgImClientServiceAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImClientServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientServiceAddress.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // uint32 weight = 3;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weight(), target);
  }

  // repeated string proto = 4;
  for (int i = 0, n = this->proto_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto(i).data(), static_cast<int>(this->proto(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImClientServiceAddress.proto");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->proto(i), target);
  }

  // map<string, string> ext = 5;
  if (!this->ext().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientServiceAddress.ExtEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImClientServiceAddress.ExtEntry.value");
      }
    };

    if (deterministic &&
        this->ext().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImClientServiceAddress_ExtEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImClientServiceAddress_ExtEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext().begin();
          it != this->ext().end(); ++it) {
        entry.reset(ext_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImClientServiceAddress)
  return target;
}

size_t XmsgImClientServiceAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImClientServiceAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string proto = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_size());
  for (int i = 0, n = this->proto_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto(i));
  }

  // map<string, string> ext = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImClientServiceAddress_ExtEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext().begin();
        it != this->ext().end(); ++it) {
      entry.reset(ext_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 weight = 3;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImClientServiceAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImClientServiceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImClientServiceAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImClientServiceAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImClientServiceAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImClientServiceAddress)
    MergeFrom(*source);
  }
}

void XmsgImClientServiceAddress::MergeFrom(const XmsgImClientServiceAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImClientServiceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_.MergeFrom(from.proto_);
  ext_.MergeFrom(from.ext_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void XmsgImClientServiceAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImClientServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImClientServiceAddress::CopyFrom(const XmsgImClientServiceAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImClientServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImClientServiceAddress::IsInitialized() const {
  return true;
}

void XmsgImClientServiceAddress::Swap(XmsgImClientServiceAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImClientServiceAddress::InternalSwap(XmsgImClientServiceAddress* other) {
  using std::swap;
  proto_.InternalSwap(&other->proto_);
  ext_.Swap(&other->ext_);
  ip_.Swap(&other->ip_);
  swap(port_, other->port_);
  swap(weight_, other->weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImClientServiceAddress::GetMetadata() const {
  protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
