// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-hlr.proto

#include "cfg-x-msg-im-hlr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImHlrCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgPb>
      _instance;
} _XmsgImHlrCfgPb_default_instance_;
class XmsgImHlrCfgMongodbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgMongodb>
      _instance;
} _XmsgImHlrCfgMongodb_default_instance_;
class XmsgImHlrCfgMysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgMysql>
      _instance;
} _XmsgImHlrCfgMysql_default_instance_;
class XmsgImHlrCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgLog>
      _instance;
} _XmsgImHlrCfgLog_default_instance_;
class XmsgImHlrCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgXscTcpServer>
      _instance;
} _XmsgImHlrCfgXscTcpServer_default_instance_;
class XmsgImHlrCfgXmsgNeH2nAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgXmsgNeH2nAddr>
      _instance;
} _XmsgImHlrCfgXmsgNeH2nAddr_default_instance_;
class XmsgImHlrCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgXmsgNeN2hAddr>
      _instance;
} _XmsgImHlrCfgXmsgNeN2hAddr_default_instance_;
class XmsgImHlrCfgContractsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgContracts>
      _instance;
} _XmsgImHlrCfgContracts_default_instance_;
class XmsgImHlrCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImHlrCfgMisc>
      _instance;
} _XmsgImHlrCfgMisc_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto {
void InitDefaultsXmsgImHlrCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMongodb();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMysql();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgLog();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMisc();
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgContracts();
  {
    void* ptr = &::_XmsgImHlrCfgPb_default_instance_;
    new (ptr) ::XmsgImHlrCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgPbImpl);
}

void InitDefaultsXmsgImHlrCfgMongodbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgMongodb_default_instance_;
    new (ptr) ::XmsgImHlrCfgMongodb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgMongodb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgMongodb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgMongodbImpl);
}

void InitDefaultsXmsgImHlrCfgMysqlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgMysql_default_instance_;
    new (ptr) ::XmsgImHlrCfgMysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgMysql::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgMysql() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgMysqlImpl);
}

void InitDefaultsXmsgImHlrCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgLog_default_instance_;
    new (ptr) ::XmsgImHlrCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgLogImpl);
}

void InitDefaultsXmsgImHlrCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgImHlrCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgXscTcpServerImpl);
}

void InitDefaultsXmsgImHlrCfgXmsgNeH2nAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgXmsgNeH2nAddr_default_instance_;
    new (ptr) ::XmsgImHlrCfgXmsgNeH2nAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgXmsgNeH2nAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgXmsgNeH2nAddrImpl);
}

void InitDefaultsXmsgImHlrCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgImHlrCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgXmsgNeN2hAddrImpl);
}

void InitDefaultsXmsgImHlrCfgContractsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgContracts_default_instance_;
    new (ptr) ::XmsgImHlrCfgContracts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgContracts::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgContracts() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgContractsImpl);
}

void InitDefaultsXmsgImHlrCfgMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImHlrCfgMisc_default_instance_;
    new (ptr) ::XmsgImHlrCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImHlrCfgMisc::InitAsDefaultInstance();
}

void InitDefaultsXmsgImHlrCfgMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImHlrCfgMiscImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, cfgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, mongodb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, mysql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, xsctcpcfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, h2n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, n2h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, misc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, contracts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, gts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgPb, uts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMongodb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMongodb, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMysql, poolsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeH2nAddr, redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgXmsgNeN2hAddr, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgContracts, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgContracts, usreventexpired_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImHlrCfgMisc, platcompetemode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgImHlrCfgPb)},
  { 17, -1, sizeof(::XmsgImHlrCfgMongodb)},
  { 23, -1, sizeof(::XmsgImHlrCfgMysql)},
  { 34, -1, sizeof(::XmsgImHlrCfgLog)},
  { 41, -1, sizeof(::XmsgImHlrCfgXscTcpServer)},
  { 60, -1, sizeof(::XmsgImHlrCfgXmsgNeH2nAddr)},
  { 71, -1, sizeof(::XmsgImHlrCfgXmsgNeN2hAddr)},
  { 80, -1, sizeof(::XmsgImHlrCfgContracts)},
  { 87, -1, sizeof(::XmsgImHlrCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgMongodb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgMysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgXmsgNeH2nAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgXmsgNeN2hAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgContracts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImHlrCfgMisc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-im-hlr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026cfg-x-msg-im-hlr.proto\"\375\002\n\016XmsgImHlrCf"
      "gPb\022\013\n\003cgt\030\001 \001(\t\022\017\n\007cfgType\030\002 \001(\t\022%\n\007mon"
      "godb\030\003 \001(\0132\024.XmsgImHlrCfgMongodb\022!\n\005mysq"
      "l\030\004 \001(\0132\022.XmsgImHlrCfgMysql\022\035\n\003log\030\005 \001(\013"
      "2\020.XmsgImHlrCfgLog\022,\n\txscTcpCfg\030\006 \001(\0132\031."
      "XmsgImHlrCfgXscTcpServer\022\'\n\003h2n\030\007 \003(\0132\032."
      "XmsgImHlrCfgXmsgNeH2nAddr\022\'\n\003n2h\030\010 \003(\0132\032"
      ".XmsgImHlrCfgXmsgNeN2hAddr\022\037\n\004misc\030\t \001(\013"
      "2\021.XmsgImHlrCfgMisc\022)\n\tcontracts\030\r \001(\0132\026"
      ".XmsgImHlrCfgContracts\022\013\n\003gts\030\n \001(\004\022\013\n\003u"
      "ts\030\013 \001(\004\"\"\n\023XmsgImHlrCfgMongodb\022\013\n\003uri\030\001"
      " \001(\t\"l\n\021XmsgImHlrCfgMysql\022\014\n\004host\030\001 \001(\t\022"
      "\014\n\004port\030\002 \001(\r\022\n\n\002db\030\003 \001(\t\022\013\n\003usr\030\004 \001(\t\022\020"
      "\n\010password\030\005 \001(\t\022\020\n\010poolSize\030\006 \001(\r\"0\n\017Xm"
      "sgImHlrCfgLog\022\r\n\005level\030\001 \001(\t\022\016\n\006output\030\002"
      " \001(\t\"\247\002\n\030XmsgImHlrCfgXscTcpServer\022\014\n\004add"
      "r\030\001 \001(\t\022\016\n\006worker\030\002 \001(\r\022\021\n\tpeerLimit\030\003 \001"
      "(\r\022\017\n\007peerMtu\030\004 \001(\r\022\022\n\npeerRcvBuf\030\005 \001(\r\022"
      "\022\n\npeerSndBuf\030\006 \001(\r\022\021\n\tlazyClose\030\007 \001(\r\022\017"
      "\n\007tracing\030\010 \001(\010\022\021\n\theartbeat\030\t \001(\r\022\021\n\tn2"
      "hZombie\030\n \001(\r\022\027\n\017n2hTransTimeout\030\013 \001(\r\022\022"
      "\n\nn2hTracing\030\014 \001(\010\022\021\n\th2nReConn\030\r \001(\r\022\027\n"
      "\017h2nTransTimeout\030\016 \001(\r\"p\n\031XmsgImHlrCfgXm"
      "sgNeH2nAddr\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\014\n"
      "\004addr\030\003 \001(\t\022\013\n\003pwd\030\004 \001(\t\022\013\n\003alg\030\005 \001(\t\022\021\n"
      "\tredundant\030\006 \001(\r\"P\n\031XmsgImHlrCfgXmsgNeN2"
      "hAddr\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\013\n\003pwd\030\003"
      " \001(\t\022\014\n\004addr\030\004 \001(\t\"@\n\025XmsgImHlrCfgContra"
      "cts\022\016\n\006enable\030\001 \001(\010\022\027\n\017usrEventExpired\030\002"
      " \001(\r\"F\n\020XmsgImHlrCfgMisc\0222\n\017platCompeteM"
      "ode\030\001 \001(\0162\031.XmsgImHlrPlatCompeteMode*\321\001\n"
      "\030XmsgImHlrPlatCompeteMode\022,\n(X_MSG_IM_HL"
      "R_PLAT_COMPETE_MODE_TYPE_ONLY\020\000\022,\n(X_MSG"
      "_IM_HLR_PLAT_COMPETE_MODE_PLAT_ONLY\020\001\0220\n"
      ",X_MSG_IM_HLR_PLAT_COMPETE_MODE_TERMINAL"
      "_ONLY\020\002\022\'\n#X_MSG_IM_HLR_PLAT_COMPETE_MOD"
      "E_AUTH\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-im-hlr.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto
const ::google::protobuf::EnumDescriptor* XmsgImHlrPlatCompeteMode_descriptor() {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_enum_descriptors[0];
}
bool XmsgImHlrPlatCompeteMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void XmsgImHlrCfgPb::InitAsDefaultInstance() {
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->mongodb_ = const_cast< ::XmsgImHlrCfgMongodb*>(
      ::XmsgImHlrCfgMongodb::internal_default_instance());
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->mysql_ = const_cast< ::XmsgImHlrCfgMysql*>(
      ::XmsgImHlrCfgMysql::internal_default_instance());
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgImHlrCfgLog*>(
      ::XmsgImHlrCfgLog::internal_default_instance());
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->xsctcpcfg_ = const_cast< ::XmsgImHlrCfgXscTcpServer*>(
      ::XmsgImHlrCfgXscTcpServer::internal_default_instance());
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgImHlrCfgMisc*>(
      ::XmsgImHlrCfgMisc::internal_default_instance());
  ::_XmsgImHlrCfgPb_default_instance_._instance.get_mutable()->contracts_ = const_cast< ::XmsgImHlrCfgContracts*>(
      ::XmsgImHlrCfgContracts::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgPb::kCgtFieldNumber;
const int XmsgImHlrCfgPb::kCfgTypeFieldNumber;
const int XmsgImHlrCfgPb::kMongodbFieldNumber;
const int XmsgImHlrCfgPb::kMysqlFieldNumber;
const int XmsgImHlrCfgPb::kLogFieldNumber;
const int XmsgImHlrCfgPb::kXscTcpCfgFieldNumber;
const int XmsgImHlrCfgPb::kH2NFieldNumber;
const int XmsgImHlrCfgPb::kN2HFieldNumber;
const int XmsgImHlrCfgPb::kMiscFieldNumber;
const int XmsgImHlrCfgPb::kContractsFieldNumber;
const int XmsgImHlrCfgPb::kGtsFieldNumber;
const int XmsgImHlrCfgPb::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgPb::XmsgImHlrCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgPb)
}
XmsgImHlrCfgPb::XmsgImHlrCfgPb(const XmsgImHlrCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      h2n_(from.h2n_),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfgtype().size() > 0) {
    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mongodb_ = new ::XmsgImHlrCfgMongodb(*from.mongodb_);
  } else {
    mongodb_ = NULL;
  }
  if (from.has_mysql()) {
    mysql_ = new ::XmsgImHlrCfgMysql(*from.mysql_);
  } else {
    mysql_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::XmsgImHlrCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_xsctcpcfg()) {
    xsctcpcfg_ = new ::XmsgImHlrCfgXscTcpServer(*from.xsctcpcfg_);
  } else {
    xsctcpcfg_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgImHlrCfgMisc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  if (from.has_contracts()) {
    contracts_ = new ::XmsgImHlrCfgContracts(*from.contracts_);
  } else {
    contracts_ = NULL;
  }
  ::memcpy(&gts_, &from.gts_,
    static_cast<size_t>(reinterpret_cast<char*>(&uts_) -
    reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgPb)
}

void XmsgImHlrCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mongodb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&mongodb_)) + sizeof(uts_));
  _cached_size_ = 0;
}

XmsgImHlrCfgPb::~XmsgImHlrCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgPb)
  SharedDtor();
}

void XmsgImHlrCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mongodb_;
  if (this != internal_default_instance()) delete mysql_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete xsctcpcfg_;
  if (this != internal_default_instance()) delete misc_;
  if (this != internal_default_instance()) delete contracts_;
}

void XmsgImHlrCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgPb& XmsgImHlrCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgPb();
  return *internal_default_instance();
}

XmsgImHlrCfgPb* XmsgImHlrCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgPb* n = new XmsgImHlrCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  h2n_.Clear();
  n2h_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  if (GetArenaNoVirtual() == NULL && contracts_ != NULL) {
    delete contracts_;
  }
  contracts_ = NULL;
  ::memset(&gts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfgType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgPb.cfgType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgMongodb mongodb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mongodb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgMysql mysql = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mysql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgLog log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xsctcpcfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_h2n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgMisc misc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImHlrCfgContracts contracts = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contracts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgPb)
  return false;
#undef DO_
}

void XmsgImHlrCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgPb.cfgType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cfgtype(), output);
  }

  // .XmsgImHlrCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mongodb_, output);
  }

  // .XmsgImHlrCfgMysql mysql = 4;
  if (this->has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mysql_, output);
  }

  // .XmsgImHlrCfgLog log = 5;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->log_, output);
  }

  // .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->xsctcpcfg_, output);
  }

  // repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->h2n(static_cast<int>(i)), output);
  }

  // repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->n2h(static_cast<int>(i)), output);
  }

  // .XmsgImHlrCfgMisc misc = 9;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->misc_, output);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->gts(), output);
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->uts(), output);
  }

  // .XmsgImHlrCfgContracts contracts = 13;
  if (this->has_contracts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->contracts_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgPb)
}

::google::protobuf::uint8* XmsgImHlrCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgPb.cfgType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cfgtype(), target);
  }

  // .XmsgImHlrCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mongodb_, deterministic, target);
  }

  // .XmsgImHlrCfgMysql mysql = 4;
  if (this->has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mysql_, deterministic, target);
  }

  // .XmsgImHlrCfgLog log = 5;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->log_, deterministic, target);
  }

  // .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->xsctcpcfg_, deterministic, target);
  }

  // repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->h2n(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  // .XmsgImHlrCfgMisc misc = 9;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->misc_, deterministic, target);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->gts(), target);
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->uts(), target);
  }

  // .XmsgImHlrCfgContracts contracts = 13;
  if (this->has_contracts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->contracts_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgPb)
  return target;
}

size_t XmsgImHlrCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->h2n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->h2n(static_cast<int>(i)));
    }
  }

  // repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfgtype());
  }

  // .XmsgImHlrCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mongodb_);
  }

  // .XmsgImHlrCfgMysql mysql = 4;
  if (this->has_mysql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mysql_);
  }

  // .XmsgImHlrCfgLog log = 5;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->xsctcpcfg_);
  }

  // .XmsgImHlrCfgMisc misc = 9;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->misc_);
  }

  // .XmsgImHlrCfgContracts contracts = 13;
  if (this->has_contracts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->contracts_);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gts());
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgPb)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgPb::MergeFrom(const XmsgImHlrCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  h2n_.MergeFrom(from.h2n_);
  n2h_.MergeFrom(from.n2h_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.cfgtype().size() > 0) {

    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mutable_mongodb()->::XmsgImHlrCfgMongodb::MergeFrom(from.mongodb());
  }
  if (from.has_mysql()) {
    mutable_mysql()->::XmsgImHlrCfgMysql::MergeFrom(from.mysql());
  }
  if (from.has_log()) {
    mutable_log()->::XmsgImHlrCfgLog::MergeFrom(from.log());
  }
  if (from.has_xsctcpcfg()) {
    mutable_xsctcpcfg()->::XmsgImHlrCfgXscTcpServer::MergeFrom(from.xsctcpcfg());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgImHlrCfgMisc::MergeFrom(from.misc());
  }
  if (from.has_contracts()) {
    mutable_contracts()->::XmsgImHlrCfgContracts::MergeFrom(from.contracts());
  }
  if (from.gts() != 0) {
    set_gts(from.gts());
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
}

void XmsgImHlrCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgPb::CopyFrom(const XmsgImHlrCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgPb::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgPb::Swap(XmsgImHlrCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgPb::InternalSwap(XmsgImHlrCfgPb* other) {
  using std::swap;
  h2n_.InternalSwap(&other->h2n_);
  n2h_.InternalSwap(&other->n2h_);
  cgt_.Swap(&other->cgt_);
  cfgtype_.Swap(&other->cfgtype_);
  swap(mongodb_, other->mongodb_);
  swap(mysql_, other->mysql_);
  swap(log_, other->log_);
  swap(xsctcpcfg_, other->xsctcpcfg_);
  swap(misc_, other->misc_);
  swap(contracts_, other->contracts_);
  swap(gts_, other->gts_);
  swap(uts_, other->uts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgMongodb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgMongodb::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgMongodb::XmsgImHlrCfgMongodb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMongodb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgMongodb)
}
XmsgImHlrCfgMongodb::XmsgImHlrCfgMongodb(const XmsgImHlrCfgMongodb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgMongodb)
}

void XmsgImHlrCfgMongodb::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImHlrCfgMongodb::~XmsgImHlrCfgMongodb() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgMongodb)
  SharedDtor();
}

void XmsgImHlrCfgMongodb::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgMongodb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgMongodb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgMongodb& XmsgImHlrCfgMongodb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMongodb();
  return *internal_default_instance();
}

XmsgImHlrCfgMongodb* XmsgImHlrCfgMongodb::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgMongodb* n = new XmsgImHlrCfgMongodb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgMongodb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgMongodb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgMongodb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgMongodb.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgMongodb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgMongodb)
  return false;
#undef DO_
}

void XmsgImHlrCfgMongodb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMongodb.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgMongodb)
}

::google::protobuf::uint8* XmsgImHlrCfgMongodb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMongodb.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgMongodb)
  return target;
}

size_t XmsgImHlrCfgMongodb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgMongodb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgMongodb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgMongodb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgMongodb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgMongodb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgMongodb)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgMongodb::MergeFrom(const XmsgImHlrCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void XmsgImHlrCfgMongodb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgMongodb::CopyFrom(const XmsgImHlrCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgMongodb::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgMongodb::Swap(XmsgImHlrCfgMongodb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgMongodb::InternalSwap(XmsgImHlrCfgMongodb* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgMongodb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgMysql::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgMysql::kHostFieldNumber;
const int XmsgImHlrCfgMysql::kPortFieldNumber;
const int XmsgImHlrCfgMysql::kDbFieldNumber;
const int XmsgImHlrCfgMysql::kUsrFieldNumber;
const int XmsgImHlrCfgMysql::kPasswordFieldNumber;
const int XmsgImHlrCfgMysql::kPoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgMysql::XmsgImHlrCfgMysql()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMysql();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgMysql)
}
XmsgImHlrCfgMysql::XmsgImHlrCfgMysql(const XmsgImHlrCfgMysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&poolsize_) -
    reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgMysql)
}

void XmsgImHlrCfgMysql::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _cached_size_ = 0;
}

XmsgImHlrCfgMysql::~XmsgImHlrCfgMysql() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgMysql)
  SharedDtor();
}

void XmsgImHlrCfgMysql::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgMysql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgMysql::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgMysql& XmsgImHlrCfgMysql::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMysql();
  return *internal_default_instance();
}

XmsgImHlrCfgMysql* XmsgImHlrCfgMysql::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgMysql* n = new XmsgImHlrCfgMysql;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgMysql::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgMysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgMysql)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgMysql.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgMysql.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgMysql.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgMysql.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 poolSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgMysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgMysql)
  return false;
#undef DO_
}

void XmsgImHlrCfgMysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db(), output);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usr(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->poolsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgMysql)
}

::google::protobuf::uint8* XmsgImHlrCfgMysql::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db(), target);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usr(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgMysql.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->poolsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgMysql)
  return target;
}

size_t XmsgImHlrCfgMysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgMysql)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string db = 3;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgMysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgMysql* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgMysql>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgMysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgMysql)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgMysql::MergeFrom(const XmsgImHlrCfgMysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.poolsize() != 0) {
    set_poolsize(from.poolsize());
  }
}

void XmsgImHlrCfgMysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgMysql::CopyFrom(const XmsgImHlrCfgMysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgMysql::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgMysql::Swap(XmsgImHlrCfgMysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgMysql::InternalSwap(XmsgImHlrCfgMysql* other) {
  using std::swap;
  host_.Swap(&other->host_);
  db_.Swap(&other->db_);
  usr_.Swap(&other->usr_);
  password_.Swap(&other->password_);
  swap(port_, other->port_);
  swap(poolsize_, other->poolsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgMysql::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgLog::kLevelFieldNumber;
const int XmsgImHlrCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgLog::XmsgImHlrCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgLog)
}
XmsgImHlrCfgLog::XmsgImHlrCfgLog(const XmsgImHlrCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgLog)
}

void XmsgImHlrCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImHlrCfgLog::~XmsgImHlrCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgLog)
  SharedDtor();
}

void XmsgImHlrCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgLog& XmsgImHlrCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgLog();
  return *internal_default_instance();
}

XmsgImHlrCfgLog* XmsgImHlrCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgLog* n = new XmsgImHlrCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgLog)
  return false;
#undef DO_
}

void XmsgImHlrCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgLog)
}

::google::protobuf::uint8* XmsgImHlrCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgLog)
  return target;
}

size_t XmsgImHlrCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgLog)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgLog::MergeFrom(const XmsgImHlrCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgImHlrCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgLog::CopyFrom(const XmsgImHlrCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgLog::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgLog::Swap(XmsgImHlrCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgLog::InternalSwap(XmsgImHlrCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgXscTcpServer::kAddrFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kTracingFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgImHlrCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgXscTcpServer::XmsgImHlrCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgXscTcpServer)
}
XmsgImHlrCfgXscTcpServer::XmsgImHlrCfgXscTcpServer(const XmsgImHlrCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgXscTcpServer)
}

void XmsgImHlrCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgImHlrCfgXscTcpServer::~XmsgImHlrCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgXscTcpServer)
  SharedDtor();
}

void XmsgImHlrCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgXscTcpServer& XmsgImHlrCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgImHlrCfgXscTcpServer* XmsgImHlrCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgXscTcpServer* n = new XmsgImHlrCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgImHlrCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgImHlrCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgXscTcpServer)
  return target;
}

size_t XmsgImHlrCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgXscTcpServer::MergeFrom(const XmsgImHlrCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgImHlrCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgXscTcpServer::CopyFrom(const XmsgImHlrCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgXscTcpServer::Swap(XmsgImHlrCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgXscTcpServer::InternalSwap(XmsgImHlrCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgXmsgNeH2nAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgXmsgNeH2nAddr::kNegFieldNumber;
const int XmsgImHlrCfgXmsgNeH2nAddr::kCgtFieldNumber;
const int XmsgImHlrCfgXmsgNeH2nAddr::kAddrFieldNumber;
const int XmsgImHlrCfgXmsgNeH2nAddr::kPwdFieldNumber;
const int XmsgImHlrCfgXmsgNeH2nAddr::kAlgFieldNumber;
const int XmsgImHlrCfgXmsgNeH2nAddr::kRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgXmsgNeH2nAddr::XmsgImHlrCfgXmsgNeH2nAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgXmsgNeH2nAddr)
}
XmsgImHlrCfgXmsgNeH2nAddr::XmsgImHlrCfgXmsgNeH2nAddr(const XmsgImHlrCfgXmsgNeH2nAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  redundant_ = from.redundant_;
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgXmsgNeH2nAddr)
}

void XmsgImHlrCfgXmsgNeH2nAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _cached_size_ = 0;
}

XmsgImHlrCfgXmsgNeH2nAddr::~XmsgImHlrCfgXmsgNeH2nAddr() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgXmsgNeH2nAddr)
  SharedDtor();
}

void XmsgImHlrCfgXmsgNeH2nAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgXmsgNeH2nAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgXmsgNeH2nAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgXmsgNeH2nAddr& XmsgImHlrCfgXmsgNeH2nAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr();
  return *internal_default_instance();
}

XmsgImHlrCfgXmsgNeH2nAddr* XmsgImHlrCfgXmsgNeH2nAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgXmsgNeH2nAddr* n = new XmsgImHlrCfgXmsgNeH2nAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgXmsgNeH2nAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgXmsgNeH2nAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgXmsgNeH2nAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeH2nAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeH2nAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeH2nAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeH2nAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeH2nAddr.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redundant = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redundant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgXmsgNeH2nAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgXmsgNeH2nAddr)
  return false;
#undef DO_
}

void XmsgImHlrCfgXmsgNeH2nAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addr(), output);
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // string alg = 5;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->alg(), output);
  }

  // uint32 redundant = 6;
  if (this->redundant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->redundant(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgXmsgNeH2nAddr)
}

::google::protobuf::uint8* XmsgImHlrCfgXmsgNeH2nAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  // string alg = 5;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeH2nAddr.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alg(), target);
  }

  // uint32 redundant = 6;
  if (this->redundant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->redundant(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgXmsgNeH2nAddr)
  return target;
}

size_t XmsgImHlrCfgXmsgNeH2nAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgXmsgNeH2nAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 5;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  // uint32 redundant = 6;
  if (this->redundant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redundant());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgXmsgNeH2nAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgXmsgNeH2nAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgXmsgNeH2nAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgXmsgNeH2nAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgXmsgNeH2nAddr)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgXmsgNeH2nAddr::MergeFrom(const XmsgImHlrCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  if (from.redundant() != 0) {
    set_redundant(from.redundant());
  }
}

void XmsgImHlrCfgXmsgNeH2nAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgXmsgNeH2nAddr::CopyFrom(const XmsgImHlrCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgXmsgNeH2nAddr::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgXmsgNeH2nAddr::Swap(XmsgImHlrCfgXmsgNeH2nAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgXmsgNeH2nAddr::InternalSwap(XmsgImHlrCfgXmsgNeH2nAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  addr_.Swap(&other->addr_);
  pwd_.Swap(&other->pwd_);
  alg_.Swap(&other->alg_);
  swap(redundant_, other->redundant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgXmsgNeH2nAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgImHlrCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgImHlrCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgImHlrCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgXmsgNeN2hAddr::XmsgImHlrCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgXmsgNeN2hAddr)
}
XmsgImHlrCfgXmsgNeN2hAddr::XmsgImHlrCfgXmsgNeN2hAddr(const XmsgImHlrCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgXmsgNeN2hAddr)
}

void XmsgImHlrCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImHlrCfgXmsgNeN2hAddr::~XmsgImHlrCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgImHlrCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImHlrCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgXmsgNeN2hAddr& XmsgImHlrCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgImHlrCfgXmsgNeN2hAddr* XmsgImHlrCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgXmsgNeN2hAddr* n = new XmsgImHlrCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImHlrCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgImHlrCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgImHlrCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImHlrCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgImHlrCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgXmsgNeN2hAddr::MergeFrom(const XmsgImHlrCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImHlrCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgXmsgNeN2hAddr::CopyFrom(const XmsgImHlrCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgXmsgNeN2hAddr::Swap(XmsgImHlrCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgXmsgNeN2hAddr::InternalSwap(XmsgImHlrCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgContracts::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgContracts::kEnableFieldNumber;
const int XmsgImHlrCfgContracts::kUsrEventExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgContracts::XmsgImHlrCfgContracts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgContracts();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgContracts)
}
XmsgImHlrCfgContracts::XmsgImHlrCfgContracts(const XmsgImHlrCfgContracts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&usreventexpired_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(usreventexpired_));
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgContracts)
}

void XmsgImHlrCfgContracts::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usreventexpired_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(usreventexpired_));
  _cached_size_ = 0;
}

XmsgImHlrCfgContracts::~XmsgImHlrCfgContracts() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgContracts)
  SharedDtor();
}

void XmsgImHlrCfgContracts::SharedDtor() {
}

void XmsgImHlrCfgContracts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgContracts::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgContracts& XmsgImHlrCfgContracts::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgContracts();
  return *internal_default_instance();
}

XmsgImHlrCfgContracts* XmsgImHlrCfgContracts::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgContracts* n = new XmsgImHlrCfgContracts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgContracts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usreventexpired_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(usreventexpired_));
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgContracts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgContracts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 usrEventExpired = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usreventexpired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgContracts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgContracts)
  return false;
#undef DO_
}

void XmsgImHlrCfgContracts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgContracts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // uint32 usrEventExpired = 2;
  if (this->usreventexpired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usreventexpired(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgContracts)
}

::google::protobuf::uint8* XmsgImHlrCfgContracts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgContracts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // uint32 usrEventExpired = 2;
  if (this->usreventexpired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usreventexpired(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgContracts)
  return target;
}

size_t XmsgImHlrCfgContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgContracts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 usrEventExpired = 2;
  if (this->usreventexpired() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usreventexpired());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgContracts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgContracts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgContracts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgContracts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgContracts)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgContracts::MergeFrom(const XmsgImHlrCfgContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.usreventexpired() != 0) {
    set_usreventexpired(from.usreventexpired());
  }
}

void XmsgImHlrCfgContracts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgContracts::CopyFrom(const XmsgImHlrCfgContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgContracts::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgContracts::Swap(XmsgImHlrCfgContracts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgContracts::InternalSwap(XmsgImHlrCfgContracts* other) {
  using std::swap;
  swap(enable_, other->enable_);
  swap(usreventexpired_, other->usreventexpired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgContracts::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImHlrCfgMisc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImHlrCfgMisc::kPlatCompeteModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImHlrCfgMisc::XmsgImHlrCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImHlrCfgMisc)
}
XmsgImHlrCfgMisc::XmsgImHlrCfgMisc(const XmsgImHlrCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platcompetemode_ = from.platcompetemode_;
  // @@protoc_insertion_point(copy_constructor:XmsgImHlrCfgMisc)
}

void XmsgImHlrCfgMisc::SharedCtor() {
  platcompetemode_ = 0;
  _cached_size_ = 0;
}

XmsgImHlrCfgMisc::~XmsgImHlrCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgImHlrCfgMisc)
  SharedDtor();
}

void XmsgImHlrCfgMisc::SharedDtor() {
}

void XmsgImHlrCfgMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImHlrCfgMisc::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImHlrCfgMisc& XmsgImHlrCfgMisc::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMisc();
  return *internal_default_instance();
}

XmsgImHlrCfgMisc* XmsgImHlrCfgMisc::New(::google::protobuf::Arena* arena) const {
  XmsgImHlrCfgMisc* n = new XmsgImHlrCfgMisc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImHlrCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImHlrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platcompetemode_ = 0;
  _internal_metadata_.Clear();
}

bool XmsgImHlrCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImHlrCfgMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_platcompetemode(static_cast< ::XmsgImHlrPlatCompeteMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImHlrCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImHlrCfgMisc)
  return false;
#undef DO_
}

void XmsgImHlrCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImHlrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
  if (this->platcompetemode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platcompetemode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImHlrCfgMisc)
}

::google::protobuf::uint8* XmsgImHlrCfgMisc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImHlrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
  if (this->platcompetemode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->platcompetemode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImHlrCfgMisc)
  return target;
}

size_t XmsgImHlrCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImHlrCfgMisc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
  if (this->platcompetemode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->platcompetemode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImHlrCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImHlrCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImHlrCfgMisc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImHlrCfgMisc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImHlrCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImHlrCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgImHlrCfgMisc::MergeFrom(const XmsgImHlrCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImHlrCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.platcompetemode() != 0) {
    set_platcompetemode(from.platcompetemode());
  }
}

void XmsgImHlrCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImHlrCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImHlrCfgMisc::CopyFrom(const XmsgImHlrCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImHlrCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImHlrCfgMisc::IsInitialized() const {
  return true;
}

void XmsgImHlrCfgMisc::Swap(XmsgImHlrCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImHlrCfgMisc::InternalSwap(XmsgImHlrCfgMisc* other) {
  using std::swap;
  swap(platcompetemode_, other->platcompetemode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImHlrCfgMisc::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
