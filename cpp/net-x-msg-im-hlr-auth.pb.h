// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-x-msg-im-hlr-auth.proto

#ifndef PROTOBUF_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto__INCLUDED
#define PROTOBUF_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "net-x-msg-im-auth.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImHlrAttachSimpleReq_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse();
void InitDefaultsXmsgImHlrAttachSimpleReqImpl();
void InitDefaultsXmsgImHlrAttachSimpleReq();
void InitDefaultsXmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse();
void InitDefaultsXmsgImHlrAttachSimpleRspImpl();
void InitDefaultsXmsgImHlrAttachSimpleRsp();
void InitDefaultsXmsgImHlrDetachSimpleReq_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse();
void InitDefaultsXmsgImHlrDetachSimpleReqImpl();
void InitDefaultsXmsgImHlrDetachSimpleReq();
void InitDefaultsXmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse();
void InitDefaultsXmsgImHlrDetachSimpleRspImpl();
void InitDefaultsXmsgImHlrDetachSimpleRsp();
void InitDefaultsXmsgImHlrOtherClientAttachReqImpl();
void InitDefaultsXmsgImHlrOtherClientAttachReq();
void InitDefaultsXmsgImHlrOtherClientAttachRspImpl();
void InitDefaultsXmsgImHlrOtherClientAttachRsp();
void InitDefaultsXmsgImHlrOtherClientAttachNoticeImpl();
void InitDefaultsXmsgImHlrOtherClientAttachNotice();
inline void InitDefaults() {
  InitDefaultsXmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse();
  InitDefaultsXmsgImHlrAttachSimpleReq();
  InitDefaultsXmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse();
  InitDefaultsXmsgImHlrAttachSimpleRsp();
  InitDefaultsXmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse();
  InitDefaultsXmsgImHlrDetachSimpleReq();
  InitDefaultsXmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse();
  InitDefaultsXmsgImHlrDetachSimpleRsp();
  InitDefaultsXmsgImHlrOtherClientAttachReq();
  InitDefaultsXmsgImHlrOtherClientAttachRsp();
  InitDefaultsXmsgImHlrOtherClientAttachNotice();
}
}  // namespace protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto
class XmsgImHlrAttachSimpleReq;
class XmsgImHlrAttachSimpleReqDefaultTypeInternal;
extern XmsgImHlrAttachSimpleReqDefaultTypeInternal _XmsgImHlrAttachSimpleReq_default_instance_;
class XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse;
class XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrAttachSimpleRsp;
class XmsgImHlrAttachSimpleRspDefaultTypeInternal;
extern XmsgImHlrAttachSimpleRspDefaultTypeInternal _XmsgImHlrAttachSimpleRsp_default_instance_;
class XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse;
class XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrDetachSimpleReq;
class XmsgImHlrDetachSimpleReqDefaultTypeInternal;
extern XmsgImHlrDetachSimpleReqDefaultTypeInternal _XmsgImHlrDetachSimpleReq_default_instance_;
class XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse;
class XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrDetachSimpleRsp;
class XmsgImHlrDetachSimpleRspDefaultTypeInternal;
extern XmsgImHlrDetachSimpleRspDefaultTypeInternal _XmsgImHlrDetachSimpleRsp_default_instance_;
class XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse;
class XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImHlrOtherClientAttachNotice;
class XmsgImHlrOtherClientAttachNoticeDefaultTypeInternal;
extern XmsgImHlrOtherClientAttachNoticeDefaultTypeInternal _XmsgImHlrOtherClientAttachNotice_default_instance_;
class XmsgImHlrOtherClientAttachReq;
class XmsgImHlrOtherClientAttachReqDefaultTypeInternal;
extern XmsgImHlrOtherClientAttachReqDefaultTypeInternal _XmsgImHlrOtherClientAttachReq_default_instance_;
class XmsgImHlrOtherClientAttachRsp;
class XmsgImHlrOtherClientAttachRspDefaultTypeInternal;
extern XmsgImHlrOtherClientAttachRspDefaultTypeInternal _XmsgImHlrOtherClientAttachRsp_default_instance_;

// ===================================================================

class XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse();
  XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse& other);
  static const XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse*>(&_XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImHlrAttachSimpleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrAttachSimpleReq) */ {
 public:
  XmsgImHlrAttachSimpleReq();
  virtual ~XmsgImHlrAttachSimpleReq();

  XmsgImHlrAttachSimpleReq(const XmsgImHlrAttachSimpleReq& from);

  inline XmsgImHlrAttachSimpleReq& operator=(const XmsgImHlrAttachSimpleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrAttachSimpleReq(XmsgImHlrAttachSimpleReq&& from) noexcept
    : XmsgImHlrAttachSimpleReq() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrAttachSimpleReq& operator=(XmsgImHlrAttachSimpleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrAttachSimpleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrAttachSimpleReq* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrAttachSimpleReq*>(
               &_XmsgImHlrAttachSimpleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgImHlrAttachSimpleReq* other);
  friend void swap(XmsgImHlrAttachSimpleReq& a, XmsgImHlrAttachSimpleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrAttachSimpleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrAttachSimpleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrAttachSimpleReq& from);
  void MergeFrom(const XmsgImHlrAttachSimpleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrAttachSimpleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 6;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string salt = 2;
  void clear_salt();
  static const int kSaltFieldNumber = 2;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // string sign = 3;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // string cgt = 5;
  void clear_cgt();
  static const int kCgtFieldNumber = 5;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // @@protoc_insertion_point(class_scope:XmsgImHlrAttachSimpleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImHlrAttachSimpleReq_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrAttachSimpleReqImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse();
  XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse& other);
  static const XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse*>(&_XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImHlrAttachSimpleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrAttachSimpleRsp) */ {
 public:
  XmsgImHlrAttachSimpleRsp();
  virtual ~XmsgImHlrAttachSimpleRsp();

  XmsgImHlrAttachSimpleRsp(const XmsgImHlrAttachSimpleRsp& from);

  inline XmsgImHlrAttachSimpleRsp& operator=(const XmsgImHlrAttachSimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrAttachSimpleRsp(XmsgImHlrAttachSimpleRsp&& from) noexcept
    : XmsgImHlrAttachSimpleRsp() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrAttachSimpleRsp& operator=(XmsgImHlrAttachSimpleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrAttachSimpleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrAttachSimpleRsp* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrAttachSimpleRsp*>(
               &_XmsgImHlrAttachSimpleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImHlrAttachSimpleRsp* other);
  friend void swap(XmsgImHlrAttachSimpleRsp& a, XmsgImHlrAttachSimpleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrAttachSimpleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrAttachSimpleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrAttachSimpleRsp& from);
  void MergeFrom(const XmsgImHlrAttachSimpleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrAttachSimpleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 1;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:XmsgImHlrAttachSimpleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImHlrAttachSimpleRsp_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrAttachSimpleRspImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse();
  XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse& other);
  static const XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse*>(&_XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImHlrDetachSimpleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrDetachSimpleReq) */ {
 public:
  XmsgImHlrDetachSimpleReq();
  virtual ~XmsgImHlrDetachSimpleReq();

  XmsgImHlrDetachSimpleReq(const XmsgImHlrDetachSimpleReq& from);

  inline XmsgImHlrDetachSimpleReq& operator=(const XmsgImHlrDetachSimpleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrDetachSimpleReq(XmsgImHlrDetachSimpleReq&& from) noexcept
    : XmsgImHlrDetachSimpleReq() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrDetachSimpleReq& operator=(XmsgImHlrDetachSimpleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrDetachSimpleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrDetachSimpleReq* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrDetachSimpleReq*>(
               &_XmsgImHlrDetachSimpleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImHlrDetachSimpleReq* other);
  friend void swap(XmsgImHlrDetachSimpleReq& a, XmsgImHlrDetachSimpleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrDetachSimpleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrDetachSimpleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrDetachSimpleReq& from);
  void MergeFrom(const XmsgImHlrDetachSimpleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrDetachSimpleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 1;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:XmsgImHlrDetachSimpleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImHlrDetachSimpleReq_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrDetachSimpleReqImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse();
  XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse& other);
  static const XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse*>(&_XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImHlrDetachSimpleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrDetachSimpleRsp) */ {
 public:
  XmsgImHlrDetachSimpleRsp();
  virtual ~XmsgImHlrDetachSimpleRsp();

  XmsgImHlrDetachSimpleRsp(const XmsgImHlrDetachSimpleRsp& from);

  inline XmsgImHlrDetachSimpleRsp& operator=(const XmsgImHlrDetachSimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrDetachSimpleRsp(XmsgImHlrDetachSimpleRsp&& from) noexcept
    : XmsgImHlrDetachSimpleRsp() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrDetachSimpleRsp& operator=(XmsgImHlrDetachSimpleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrDetachSimpleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrDetachSimpleRsp* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrDetachSimpleRsp*>(
               &_XmsgImHlrDetachSimpleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImHlrDetachSimpleRsp* other);
  friend void swap(XmsgImHlrDetachSimpleRsp& a, XmsgImHlrDetachSimpleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrDetachSimpleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrDetachSimpleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrDetachSimpleRsp& from);
  void MergeFrom(const XmsgImHlrDetachSimpleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrDetachSimpleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 1;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:XmsgImHlrDetachSimpleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImHlrDetachSimpleRsp_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrDetachSimpleRspImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrOtherClientAttachReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrOtherClientAttachReq) */ {
 public:
  XmsgImHlrOtherClientAttachReq();
  virtual ~XmsgImHlrOtherClientAttachReq();

  XmsgImHlrOtherClientAttachReq(const XmsgImHlrOtherClientAttachReq& from);

  inline XmsgImHlrOtherClientAttachReq& operator=(const XmsgImHlrOtherClientAttachReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrOtherClientAttachReq(XmsgImHlrOtherClientAttachReq&& from) noexcept
    : XmsgImHlrOtherClientAttachReq() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrOtherClientAttachReq& operator=(XmsgImHlrOtherClientAttachReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrOtherClientAttachReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrOtherClientAttachReq* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrOtherClientAttachReq*>(
               &_XmsgImHlrOtherClientAttachReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgImHlrOtherClientAttachReq* other);
  friend void swap(XmsgImHlrOtherClientAttachReq& a, XmsgImHlrOtherClientAttachReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrOtherClientAttachReq* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrOtherClientAttachReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrOtherClientAttachReq& from);
  void MergeFrom(const XmsgImHlrOtherClientAttachReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrOtherClientAttachReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // .XmsgImClientDeviceInfo dev = 1;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  const ::XmsgImClientDeviceInfo& dev() const;
  ::XmsgImClientDeviceInfo* release_dev();
  ::XmsgImClientDeviceInfo* mutable_dev();
  void set_allocated_dev(::XmsgImClientDeviceInfo* dev);

  // @@protoc_insertion_point(class_scope:XmsgImHlrOtherClientAttachReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::XmsgImClientDeviceInfo* dev_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrOtherClientAttachReqImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrOtherClientAttachRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrOtherClientAttachRsp) */ {
 public:
  XmsgImHlrOtherClientAttachRsp();
  virtual ~XmsgImHlrOtherClientAttachRsp();

  XmsgImHlrOtherClientAttachRsp(const XmsgImHlrOtherClientAttachRsp& from);

  inline XmsgImHlrOtherClientAttachRsp& operator=(const XmsgImHlrOtherClientAttachRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrOtherClientAttachRsp(XmsgImHlrOtherClientAttachRsp&& from) noexcept
    : XmsgImHlrOtherClientAttachRsp() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrOtherClientAttachRsp& operator=(XmsgImHlrOtherClientAttachRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrOtherClientAttachRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrOtherClientAttachRsp* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrOtherClientAttachRsp*>(
               &_XmsgImHlrOtherClientAttachRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(XmsgImHlrOtherClientAttachRsp* other);
  friend void swap(XmsgImHlrOtherClientAttachRsp& a, XmsgImHlrOtherClientAttachRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrOtherClientAttachRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrOtherClientAttachRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrOtherClientAttachRsp& from);
  void MergeFrom(const XmsgImHlrOtherClientAttachRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrOtherClientAttachRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:XmsgImHlrOtherClientAttachRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrOtherClientAttachRspImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrOtherClientAttachNotice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrOtherClientAttachNotice) */ {
 public:
  XmsgImHlrOtherClientAttachNotice();
  virtual ~XmsgImHlrOtherClientAttachNotice();

  XmsgImHlrOtherClientAttachNotice(const XmsgImHlrOtherClientAttachNotice& from);

  inline XmsgImHlrOtherClientAttachNotice& operator=(const XmsgImHlrOtherClientAttachNotice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrOtherClientAttachNotice(XmsgImHlrOtherClientAttachNotice&& from) noexcept
    : XmsgImHlrOtherClientAttachNotice() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrOtherClientAttachNotice& operator=(XmsgImHlrOtherClientAttachNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrOtherClientAttachNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrOtherClientAttachNotice* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrOtherClientAttachNotice*>(
               &_XmsgImHlrOtherClientAttachNotice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(XmsgImHlrOtherClientAttachNotice* other);
  friend void swap(XmsgImHlrOtherClientAttachNotice& a, XmsgImHlrOtherClientAttachNotice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrOtherClientAttachNotice* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrOtherClientAttachNotice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrOtherClientAttachNotice& from);
  void MergeFrom(const XmsgImHlrOtherClientAttachNotice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrOtherClientAttachNotice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // .XmsgImClientDeviceInfo dev = 1;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  const ::XmsgImClientDeviceInfo& dev() const;
  ::XmsgImClientDeviceInfo* release_dev();
  ::XmsgImClientDeviceInfo* mutable_dev();
  void set_allocated_dev(::XmsgImClientDeviceInfo* dev);

  // @@protoc_insertion_point(class_scope:XmsgImHlrOtherClientAttachNotice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::XmsgImClientDeviceInfo* dev_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto::InitDefaultsXmsgImHlrOtherClientAttachNoticeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XmsgImHlrAttachSimpleReq

// string token = 1;
inline void XmsgImHlrAttachSimpleReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrAttachSimpleReq::token() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrAttachSimpleReq.token)
  return token_.GetNoArena();
}
inline void XmsgImHlrAttachSimpleReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrAttachSimpleReq.token)
}
#if LANG_CXX11
inline void XmsgImHlrAttachSimpleReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrAttachSimpleReq.token)
}
#endif
inline void XmsgImHlrAttachSimpleReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrAttachSimpleReq.token)
}
inline void XmsgImHlrAttachSimpleReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrAttachSimpleReq.token)
}
inline ::std::string* XmsgImHlrAttachSimpleReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrAttachSimpleReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrAttachSimpleReq::release_token() {
  // @@protoc_insertion_point(field_release:XmsgImHlrAttachSimpleReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrAttachSimpleReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrAttachSimpleReq.token)
}

// string salt = 2;
inline void XmsgImHlrAttachSimpleReq::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrAttachSimpleReq::salt() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrAttachSimpleReq.salt)
  return salt_.GetNoArena();
}
inline void XmsgImHlrAttachSimpleReq::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrAttachSimpleReq.salt)
}
#if LANG_CXX11
inline void XmsgImHlrAttachSimpleReq::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrAttachSimpleReq.salt)
}
#endif
inline void XmsgImHlrAttachSimpleReq::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrAttachSimpleReq.salt)
}
inline void XmsgImHlrAttachSimpleReq::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrAttachSimpleReq.salt)
}
inline ::std::string* XmsgImHlrAttachSimpleReq::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrAttachSimpleReq.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrAttachSimpleReq::release_salt() {
  // @@protoc_insertion_point(field_release:XmsgImHlrAttachSimpleReq.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrAttachSimpleReq::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrAttachSimpleReq.salt)
}

// string sign = 3;
inline void XmsgImHlrAttachSimpleReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrAttachSimpleReq::sign() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrAttachSimpleReq.sign)
  return sign_.GetNoArena();
}
inline void XmsgImHlrAttachSimpleReq::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrAttachSimpleReq.sign)
}
#if LANG_CXX11
inline void XmsgImHlrAttachSimpleReq::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrAttachSimpleReq.sign)
}
#endif
inline void XmsgImHlrAttachSimpleReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrAttachSimpleReq.sign)
}
inline void XmsgImHlrAttachSimpleReq::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrAttachSimpleReq.sign)
}
inline ::std::string* XmsgImHlrAttachSimpleReq::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrAttachSimpleReq.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrAttachSimpleReq::release_sign() {
  // @@protoc_insertion_point(field_release:XmsgImHlrAttachSimpleReq.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrAttachSimpleReq::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrAttachSimpleReq.sign)
}

// string alg = 4;
inline void XmsgImHlrAttachSimpleReq::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrAttachSimpleReq::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrAttachSimpleReq.alg)
  return alg_.GetNoArena();
}
inline void XmsgImHlrAttachSimpleReq::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrAttachSimpleReq.alg)
}
#if LANG_CXX11
inline void XmsgImHlrAttachSimpleReq::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrAttachSimpleReq.alg)
}
#endif
inline void XmsgImHlrAttachSimpleReq::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrAttachSimpleReq.alg)
}
inline void XmsgImHlrAttachSimpleReq::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrAttachSimpleReq.alg)
}
inline ::std::string* XmsgImHlrAttachSimpleReq::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrAttachSimpleReq.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrAttachSimpleReq::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImHlrAttachSimpleReq.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrAttachSimpleReq::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrAttachSimpleReq.alg)
}

// string cgt = 5;
inline void XmsgImHlrAttachSimpleReq::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrAttachSimpleReq::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrAttachSimpleReq.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImHlrAttachSimpleReq::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrAttachSimpleReq.cgt)
}
#if LANG_CXX11
inline void XmsgImHlrAttachSimpleReq::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrAttachSimpleReq.cgt)
}
#endif
inline void XmsgImHlrAttachSimpleReq::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrAttachSimpleReq.cgt)
}
inline void XmsgImHlrAttachSimpleReq::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrAttachSimpleReq.cgt)
}
inline ::std::string* XmsgImHlrAttachSimpleReq::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrAttachSimpleReq.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrAttachSimpleReq::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImHlrAttachSimpleReq.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrAttachSimpleReq::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrAttachSimpleReq.cgt)
}

// map<string, string> ext = 6;
inline int XmsgImHlrAttachSimpleReq::ext_size() const {
  return ext_.size();
}
inline void XmsgImHlrAttachSimpleReq::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImHlrAttachSimpleReq::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImHlrAttachSimpleReq.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImHlrAttachSimpleReq::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImHlrAttachSimpleReq.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImHlrAttachSimpleRsp

// map<string, string> ext = 1;
inline int XmsgImHlrAttachSimpleRsp::ext_size() const {
  return ext_.size();
}
inline void XmsgImHlrAttachSimpleRsp::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImHlrAttachSimpleRsp::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImHlrAttachSimpleRsp.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImHlrAttachSimpleRsp::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImHlrAttachSimpleRsp.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImHlrDetachSimpleReq

// map<string, string> ext = 1;
inline int XmsgImHlrDetachSimpleReq::ext_size() const {
  return ext_.size();
}
inline void XmsgImHlrDetachSimpleReq::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImHlrDetachSimpleReq::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImHlrDetachSimpleReq.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImHlrDetachSimpleReq::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImHlrDetachSimpleReq.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImHlrDetachSimpleRsp

// map<string, string> ext = 1;
inline int XmsgImHlrDetachSimpleRsp::ext_size() const {
  return ext_.size();
}
inline void XmsgImHlrDetachSimpleRsp::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImHlrDetachSimpleRsp::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImHlrDetachSimpleRsp.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImHlrDetachSimpleRsp::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImHlrDetachSimpleRsp.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// XmsgImHlrOtherClientAttachReq

// .XmsgImClientDeviceInfo dev = 1;
inline bool XmsgImHlrOtherClientAttachReq::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
inline const ::XmsgImClientDeviceInfo& XmsgImHlrOtherClientAttachReq::dev() const {
  const ::XmsgImClientDeviceInfo* p = dev_;
  // @@protoc_insertion_point(field_get:XmsgImHlrOtherClientAttachReq.dev)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImClientDeviceInfo*>(
      &::_XmsgImClientDeviceInfo_default_instance_);
}
inline ::XmsgImClientDeviceInfo* XmsgImHlrOtherClientAttachReq::release_dev() {
  // @@protoc_insertion_point(field_release:XmsgImHlrOtherClientAttachReq.dev)
  
  ::XmsgImClientDeviceInfo* temp = dev_;
  dev_ = NULL;
  return temp;
}
inline ::XmsgImClientDeviceInfo* XmsgImHlrOtherClientAttachReq::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::XmsgImClientDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrOtherClientAttachReq.dev)
  return dev_;
}
inline void XmsgImHlrOtherClientAttachReq::set_allocated_dev(::XmsgImClientDeviceInfo* dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dev_);
  }
  if (dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dev, submessage_arena);
    }
    
  } else {
    
  }
  dev_ = dev;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrOtherClientAttachReq.dev)
}

// string host = 2;
inline void XmsgImHlrOtherClientAttachReq::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrOtherClientAttachReq::host() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrOtherClientAttachReq.host)
  return host_.GetNoArena();
}
inline void XmsgImHlrOtherClientAttachReq::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrOtherClientAttachReq.host)
}
#if LANG_CXX11
inline void XmsgImHlrOtherClientAttachReq::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrOtherClientAttachReq.host)
}
#endif
inline void XmsgImHlrOtherClientAttachReq::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrOtherClientAttachReq.host)
}
inline void XmsgImHlrOtherClientAttachReq::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrOtherClientAttachReq.host)
}
inline ::std::string* XmsgImHlrOtherClientAttachReq::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrOtherClientAttachReq.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrOtherClientAttachReq::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImHlrOtherClientAttachReq.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrOtherClientAttachReq::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrOtherClientAttachReq.host)
}

// -------------------------------------------------------------------

// XmsgImHlrOtherClientAttachRsp

// string action = 1;
inline void XmsgImHlrOtherClientAttachRsp::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrOtherClientAttachRsp::action() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrOtherClientAttachRsp.action)
  return action_.GetNoArena();
}
inline void XmsgImHlrOtherClientAttachRsp::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrOtherClientAttachRsp.action)
}
#if LANG_CXX11
inline void XmsgImHlrOtherClientAttachRsp::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrOtherClientAttachRsp.action)
}
#endif
inline void XmsgImHlrOtherClientAttachRsp::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrOtherClientAttachRsp.action)
}
inline void XmsgImHlrOtherClientAttachRsp::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrOtherClientAttachRsp.action)
}
inline ::std::string* XmsgImHlrOtherClientAttachRsp::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrOtherClientAttachRsp.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrOtherClientAttachRsp::release_action() {
  // @@protoc_insertion_point(field_release:XmsgImHlrOtherClientAttachRsp.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrOtherClientAttachRsp::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrOtherClientAttachRsp.action)
}

// -------------------------------------------------------------------

// XmsgImHlrOtherClientAttachNotice

// .XmsgImClientDeviceInfo dev = 1;
inline bool XmsgImHlrOtherClientAttachNotice::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
inline const ::XmsgImClientDeviceInfo& XmsgImHlrOtherClientAttachNotice::dev() const {
  const ::XmsgImClientDeviceInfo* p = dev_;
  // @@protoc_insertion_point(field_get:XmsgImHlrOtherClientAttachNotice.dev)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImClientDeviceInfo*>(
      &::_XmsgImClientDeviceInfo_default_instance_);
}
inline ::XmsgImClientDeviceInfo* XmsgImHlrOtherClientAttachNotice::release_dev() {
  // @@protoc_insertion_point(field_release:XmsgImHlrOtherClientAttachNotice.dev)
  
  ::XmsgImClientDeviceInfo* temp = dev_;
  dev_ = NULL;
  return temp;
}
inline ::XmsgImClientDeviceInfo* XmsgImHlrOtherClientAttachNotice::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::XmsgImClientDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrOtherClientAttachNotice.dev)
  return dev_;
}
inline void XmsgImHlrOtherClientAttachNotice::set_allocated_dev(::XmsgImClientDeviceInfo* dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dev_);
  }
  if (dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dev, submessage_arena);
    }
    
  } else {
    
  }
  dev_ = dev;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrOtherClientAttachNotice.dev)
}

// string host = 2;
inline void XmsgImHlrOtherClientAttachNotice::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrOtherClientAttachNotice::host() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrOtherClientAttachNotice.host)
  return host_.GetNoArena();
}
inline void XmsgImHlrOtherClientAttachNotice::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrOtherClientAttachNotice.host)
}
#if LANG_CXX11
inline void XmsgImHlrOtherClientAttachNotice::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrOtherClientAttachNotice.host)
}
#endif
inline void XmsgImHlrOtherClientAttachNotice::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrOtherClientAttachNotice.host)
}
inline void XmsgImHlrOtherClientAttachNotice::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrOtherClientAttachNotice.host)
}
inline ::std::string* XmsgImHlrOtherClientAttachNotice::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrOtherClientAttachNotice.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrOtherClientAttachNotice::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImHlrOtherClientAttachNotice.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrOtherClientAttachNotice::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrOtherClientAttachNotice.host)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2dx_2dmsg_2dim_2dhlr_2dauth_2eproto__INCLUDED
