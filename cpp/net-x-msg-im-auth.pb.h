// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-x-msg-im-auth.proto

#ifndef PROTOBUF_net_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED
#define PROTOBUF_net_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImAuthSimpleReqImpl();
void InitDefaultsXmsgImAuthSimpleReq();
void InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUse();
void InitDefaultsXmsgImAuthSimpleRspImpl();
void InitDefaultsXmsgImAuthSimpleRsp();
void InitDefaultsXmsgImAuthRegSimpleReqImpl();
void InitDefaultsXmsgImAuthRegSimpleReq();
void InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse();
void InitDefaultsXmsgImAuthRegSimpleRspImpl();
void InitDefaultsXmsgImAuthRegSimpleRsp();
void InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUse();
void InitDefaultsXmsgImClientDeviceInfoImpl();
void InitDefaultsXmsgImClientDeviceInfo();
void InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUseImpl();
void InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUse();
void InitDefaultsXmsgImClientServiceAddressImpl();
void InitDefaultsXmsgImClientServiceAddress();
inline void InitDefaults() {
  InitDefaultsXmsgImAuthSimpleReq();
  InitDefaultsXmsgImAuthSimpleRsp_ExtEntry_DoNotUse();
  InitDefaultsXmsgImAuthSimpleRsp();
  InitDefaultsXmsgImAuthRegSimpleReq();
  InitDefaultsXmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse();
  InitDefaultsXmsgImAuthRegSimpleRsp();
  InitDefaultsXmsgImClientDeviceInfo_ExtEntry_DoNotUse();
  InitDefaultsXmsgImClientDeviceInfo();
  InitDefaultsXmsgImClientServiceAddress_ExtEntry_DoNotUse();
  InitDefaultsXmsgImClientServiceAddress();
}
}  // namespace protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto
class XmsgImAuthRegSimpleReq;
class XmsgImAuthRegSimpleReqDefaultTypeInternal;
extern XmsgImAuthRegSimpleReqDefaultTypeInternal _XmsgImAuthRegSimpleReq_default_instance_;
class XmsgImAuthRegSimpleRsp;
class XmsgImAuthRegSimpleRspDefaultTypeInternal;
extern XmsgImAuthRegSimpleRspDefaultTypeInternal _XmsgImAuthRegSimpleRsp_default_instance_;
class XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse;
class XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImAuthSimpleReq;
class XmsgImAuthSimpleReqDefaultTypeInternal;
extern XmsgImAuthSimpleReqDefaultTypeInternal _XmsgImAuthSimpleReq_default_instance_;
class XmsgImAuthSimpleRsp;
class XmsgImAuthSimpleRspDefaultTypeInternal;
extern XmsgImAuthSimpleRspDefaultTypeInternal _XmsgImAuthSimpleRsp_default_instance_;
class XmsgImAuthSimpleRsp_ExtEntry_DoNotUse;
class XmsgImAuthSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImAuthSimpleRsp_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImAuthSimpleRsp_ExtEntry_DoNotUse_default_instance_;
class XmsgImClientDeviceInfo;
class XmsgImClientDeviceInfoDefaultTypeInternal;
extern XmsgImClientDeviceInfoDefaultTypeInternal _XmsgImClientDeviceInfo_default_instance_;
class XmsgImClientDeviceInfo_ExtEntry_DoNotUse;
class XmsgImClientDeviceInfo_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImClientDeviceInfo_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImClientDeviceInfo_ExtEntry_DoNotUse_default_instance_;
class XmsgImClientServiceAddress;
class XmsgImClientServiceAddressDefaultTypeInternal;
extern XmsgImClientServiceAddressDefaultTypeInternal _XmsgImClientServiceAddress_default_instance_;
class XmsgImClientServiceAddress_ExtEntry_DoNotUse;
class XmsgImClientServiceAddress_ExtEntry_DoNotUseDefaultTypeInternal;
extern XmsgImClientServiceAddress_ExtEntry_DoNotUseDefaultTypeInternal _XmsgImClientServiceAddress_ExtEntry_DoNotUse_default_instance_;

// ===================================================================

class XmsgImAuthSimpleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthSimpleReq) */ {
 public:
  XmsgImAuthSimpleReq();
  virtual ~XmsgImAuthSimpleReq();

  XmsgImAuthSimpleReq(const XmsgImAuthSimpleReq& from);

  inline XmsgImAuthSimpleReq& operator=(const XmsgImAuthSimpleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthSimpleReq(XmsgImAuthSimpleReq&& from) noexcept
    : XmsgImAuthSimpleReq() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthSimpleReq& operator=(XmsgImAuthSimpleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthSimpleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthSimpleReq* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthSimpleReq*>(
               &_XmsgImAuthSimpleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgImAuthSimpleReq* other);
  friend void swap(XmsgImAuthSimpleReq& a, XmsgImAuthSimpleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthSimpleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthSimpleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthSimpleReq& from);
  void MergeFrom(const XmsgImAuthSimpleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthSimpleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usr = 1;
  void clear_usr();
  static const int kUsrFieldNumber = 1;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string salt = 2;
  void clear_salt();
  static const int kSaltFieldNumber = 2;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // string sign = 3;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // .XmsgImClientDeviceInfo dev = 4;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 4;
  const ::XmsgImClientDeviceInfo& dev() const;
  ::XmsgImClientDeviceInfo* release_dev();
  ::XmsgImClientDeviceInfo* mutable_dev();
  void set_allocated_dev(::XmsgImClientDeviceInfo* dev);

  // @@protoc_insertion_point(class_scope:XmsgImAuthSimpleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::XmsgImClientDeviceInfo* dev_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleReqImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthSimpleRsp_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImAuthSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImAuthSimpleRsp_ExtEntry_DoNotUse();
  XmsgImAuthSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImAuthSimpleRsp_ExtEntry_DoNotUse& other);
  static const XmsgImAuthSimpleRsp_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImAuthSimpleRsp_ExtEntry_DoNotUse*>(&_XmsgImAuthSimpleRsp_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImAuthSimpleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthSimpleRsp) */ {
 public:
  XmsgImAuthSimpleRsp();
  virtual ~XmsgImAuthSimpleRsp();

  XmsgImAuthSimpleRsp(const XmsgImAuthSimpleRsp& from);

  inline XmsgImAuthSimpleRsp& operator=(const XmsgImAuthSimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthSimpleRsp(XmsgImAuthSimpleRsp&& from) noexcept
    : XmsgImAuthSimpleRsp() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthSimpleRsp& operator=(XmsgImAuthSimpleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthSimpleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthSimpleRsp* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthSimpleRsp*>(
               &_XmsgImAuthSimpleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgImAuthSimpleRsp* other);
  friend void swap(XmsgImAuthSimpleRsp& a, XmsgImAuthSimpleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthSimpleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthSimpleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthSimpleRsp& from);
  void MergeFrom(const XmsgImAuthSimpleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthSimpleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .XmsgImClientServiceAddress apAddr = 4;
  int apaddr_size() const;
  void clear_apaddr();
  static const int kApAddrFieldNumber = 4;
  const ::XmsgImClientServiceAddress& apaddr(int index) const;
  ::XmsgImClientServiceAddress* mutable_apaddr(int index);
  ::XmsgImClientServiceAddress* add_apaddr();
  ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >*
      mutable_apaddr();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >&
      apaddr() const;

  // repeated .XmsgImClientServiceAddress fsAddr = 5;
  int fsaddr_size() const;
  void clear_fsaddr();
  static const int kFsAddrFieldNumber = 5;
  const ::XmsgImClientServiceAddress& fsaddr(int index) const;
  ::XmsgImClientServiceAddress* mutable_fsaddr(int index);
  ::XmsgImClientServiceAddress* add_fsaddr();
  ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >*
      mutable_fsaddr();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >&
      fsaddr() const;

  // map<string, string> ext = 8;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string secret = 2;
  void clear_secret();
  static const int kSecretFieldNumber = 2;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // string cgt = 7;
  void clear_cgt();
  static const int kCgtFieldNumber = 7;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // uint64 expired = 3;
  void clear_expired();
  static const int kExpiredFieldNumber = 3;
  ::google::protobuf::uint64 expired() const;
  void set_expired(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthSimpleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress > apaddr_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress > fsaddr_;
  ::google::protobuf::internal::MapField<
      XmsgImAuthSimpleRsp_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::uint64 expired_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthSimpleRspImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthRegSimpleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthRegSimpleReq) */ {
 public:
  XmsgImAuthRegSimpleReq();
  virtual ~XmsgImAuthRegSimpleReq();

  XmsgImAuthRegSimpleReq(const XmsgImAuthRegSimpleReq& from);

  inline XmsgImAuthRegSimpleReq& operator=(const XmsgImAuthRegSimpleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthRegSimpleReq(XmsgImAuthRegSimpleReq&& from) noexcept
    : XmsgImAuthRegSimpleReq() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthRegSimpleReq& operator=(XmsgImAuthRegSimpleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthRegSimpleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthRegSimpleReq* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthRegSimpleReq*>(
               &_XmsgImAuthRegSimpleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImAuthRegSimpleReq* other);
  friend void swap(XmsgImAuthRegSimpleReq& a, XmsgImAuthRegSimpleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthRegSimpleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthRegSimpleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthRegSimpleReq& from);
  void MergeFrom(const XmsgImAuthRegSimpleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthRegSimpleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usr = 1;
  void clear_usr();
  static const int kUsrFieldNumber = 1;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string salt = 2;
  void clear_salt();
  static const int kSaltFieldNumber = 2;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // .XmsgImClientDeviceInfo dev = 4;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 4;
  const ::XmsgImClientDeviceInfo& dev() const;
  ::XmsgImClientDeviceInfo* release_dev();
  ::XmsgImClientDeviceInfo* mutable_dev();
  void set_allocated_dev(::XmsgImClientDeviceInfo* dev);

  // @@protoc_insertion_point(class_scope:XmsgImAuthRegSimpleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::XmsgImClientDeviceInfo* dev_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleReqImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse();
  XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse& other);
  static const XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse*>(&_XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImAuthRegSimpleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthRegSimpleRsp) */ {
 public:
  XmsgImAuthRegSimpleRsp();
  virtual ~XmsgImAuthRegSimpleRsp();

  XmsgImAuthRegSimpleRsp(const XmsgImAuthRegSimpleRsp& from);

  inline XmsgImAuthRegSimpleRsp& operator=(const XmsgImAuthRegSimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthRegSimpleRsp(XmsgImAuthRegSimpleRsp&& from) noexcept
    : XmsgImAuthRegSimpleRsp() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthRegSimpleRsp& operator=(XmsgImAuthRegSimpleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthRegSimpleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthRegSimpleRsp* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthRegSimpleRsp*>(
               &_XmsgImAuthRegSimpleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImAuthRegSimpleRsp* other);
  friend void swap(XmsgImAuthRegSimpleRsp& a, XmsgImAuthRegSimpleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthRegSimpleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthRegSimpleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthRegSimpleRsp& from);
  void MergeFrom(const XmsgImAuthRegSimpleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthRegSimpleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 2;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // @@protoc_insertion_point(class_scope:XmsgImAuthRegSimpleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImAuthRegSimpleRsp_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthRegSimpleRspImpl();
};
// -------------------------------------------------------------------

class XmsgImClientDeviceInfo_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImClientDeviceInfo_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImClientDeviceInfo_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImClientDeviceInfo_ExtEntry_DoNotUse();
  XmsgImClientDeviceInfo_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImClientDeviceInfo_ExtEntry_DoNotUse& other);
  static const XmsgImClientDeviceInfo_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImClientDeviceInfo_ExtEntry_DoNotUse*>(&_XmsgImClientDeviceInfo_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImClientDeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImClientDeviceInfo) */ {
 public:
  XmsgImClientDeviceInfo();
  virtual ~XmsgImClientDeviceInfo();

  XmsgImClientDeviceInfo(const XmsgImClientDeviceInfo& from);

  inline XmsgImClientDeviceInfo& operator=(const XmsgImClientDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImClientDeviceInfo(XmsgImClientDeviceInfo&& from) noexcept
    : XmsgImClientDeviceInfo() {
    *this = ::std::move(from);
  }

  inline XmsgImClientDeviceInfo& operator=(XmsgImClientDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImClientDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImClientDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const XmsgImClientDeviceInfo*>(
               &_XmsgImClientDeviceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImClientDeviceInfo* other);
  friend void swap(XmsgImClientDeviceInfo& a, XmsgImClientDeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImClientDeviceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImClientDeviceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImClientDeviceInfo& from);
  void MergeFrom(const XmsgImClientDeviceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImClientDeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ext = 4;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // string plat = 1;
  void clear_plat();
  static const int kPlatFieldNumber = 1;
  const ::std::string& plat() const;
  void set_plat(const ::std::string& value);
  #if LANG_CXX11
  void set_plat(::std::string&& value);
  #endif
  void set_plat(const char* value);
  void set_plat(const char* value, size_t size);
  ::std::string* mutable_plat();
  ::std::string* release_plat();
  void set_allocated_plat(::std::string* plat);

  // string did = 2;
  void clear_did();
  static const int kDidFieldNumber = 2;
  const ::std::string& did() const;
  void set_did(const ::std::string& value);
  #if LANG_CXX11
  void set_did(::std::string&& value);
  #endif
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  ::std::string* mutable_did();
  ::std::string* release_did();
  void set_allocated_did(::std::string* did);

  // string ver = 3;
  void clear_ver();
  static const int kVerFieldNumber = 3;
  const ::std::string& ver() const;
  void set_ver(const ::std::string& value);
  #if LANG_CXX11
  void set_ver(::std::string&& value);
  #endif
  void set_ver(const char* value);
  void set_ver(const char* value, size_t size);
  ::std::string* mutable_ver();
  ::std::string* release_ver();
  void set_allocated_ver(::std::string* ver);

  // @@protoc_insertion_point(class_scope:XmsgImClientDeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      XmsgImClientDeviceInfo_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::google::protobuf::internal::ArenaStringPtr plat_;
  ::google::protobuf::internal::ArenaStringPtr did_;
  ::google::protobuf::internal::ArenaStringPtr ver_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientDeviceInfoImpl();
};
// -------------------------------------------------------------------

class XmsgImClientServiceAddress_ExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImClientServiceAddress_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImClientServiceAddress_ExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImClientServiceAddress_ExtEntry_DoNotUse();
  XmsgImClientServiceAddress_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImClientServiceAddress_ExtEntry_DoNotUse& other);
  static const XmsgImClientServiceAddress_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImClientServiceAddress_ExtEntry_DoNotUse*>(&_XmsgImClientServiceAddress_ExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImClientServiceAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImClientServiceAddress) */ {
 public:
  XmsgImClientServiceAddress();
  virtual ~XmsgImClientServiceAddress();

  XmsgImClientServiceAddress(const XmsgImClientServiceAddress& from);

  inline XmsgImClientServiceAddress& operator=(const XmsgImClientServiceAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImClientServiceAddress(XmsgImClientServiceAddress&& from) noexcept
    : XmsgImClientServiceAddress() {
    *this = ::std::move(from);
  }

  inline XmsgImClientServiceAddress& operator=(XmsgImClientServiceAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImClientServiceAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImClientServiceAddress* internal_default_instance() {
    return reinterpret_cast<const XmsgImClientServiceAddress*>(
               &_XmsgImClientServiceAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(XmsgImClientServiceAddress* other);
  friend void swap(XmsgImClientServiceAddress& a, XmsgImClientServiceAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImClientServiceAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImClientServiceAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImClientServiceAddress& from);
  void MergeFrom(const XmsgImClientServiceAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImClientServiceAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string proto = 4;
  int proto_size() const;
  void clear_proto();
  static const int kProtoFieldNumber = 4;
  const ::std::string& proto(int index) const;
  ::std::string* mutable_proto(int index);
  void set_proto(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_proto(int index, ::std::string&& value);
  #endif
  void set_proto(int index, const char* value);
  void set_proto(int index, const char* value, size_t size);
  ::std::string* add_proto();
  void add_proto(const ::std::string& value);
  #if LANG_CXX11
  void add_proto(::std::string&& value);
  #endif
  void add_proto(const char* value);
  void add_proto(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& proto() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_proto();

  // map<string, string> ext = 5;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext();

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 weight = 3;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImClientServiceAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> proto_;
  ::google::protobuf::internal::MapField<
      XmsgImClientServiceAddress_ExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_net_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImClientServiceAddressImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgImAuthSimpleReq

// string usr = 1;
inline void XmsgImAuthSimpleReq::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleReq::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleReq.usr)
  return usr_.GetNoArena();
}
inline void XmsgImAuthSimpleReq::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleReq.usr)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleReq::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleReq.usr)
}
#endif
inline void XmsgImAuthSimpleReq::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleReq.usr)
}
inline void XmsgImAuthSimpleReq::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleReq.usr)
}
inline ::std::string* XmsgImAuthSimpleReq::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleReq.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleReq::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleReq.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleReq::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleReq.usr)
}

// string salt = 2;
inline void XmsgImAuthSimpleReq::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleReq::salt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleReq.salt)
  return salt_.GetNoArena();
}
inline void XmsgImAuthSimpleReq::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleReq.salt)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleReq::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleReq.salt)
}
#endif
inline void XmsgImAuthSimpleReq::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleReq.salt)
}
inline void XmsgImAuthSimpleReq::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleReq.salt)
}
inline ::std::string* XmsgImAuthSimpleReq::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleReq.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleReq::release_salt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleReq.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleReq::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleReq.salt)
}

// string sign = 3;
inline void XmsgImAuthSimpleReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleReq::sign() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleReq.sign)
  return sign_.GetNoArena();
}
inline void XmsgImAuthSimpleReq::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleReq.sign)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleReq::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleReq.sign)
}
#endif
inline void XmsgImAuthSimpleReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleReq.sign)
}
inline void XmsgImAuthSimpleReq::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleReq.sign)
}
inline ::std::string* XmsgImAuthSimpleReq::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleReq.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleReq::release_sign() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleReq.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleReq::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleReq.sign)
}

// .XmsgImClientDeviceInfo dev = 4;
inline bool XmsgImAuthSimpleReq::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
inline void XmsgImAuthSimpleReq::clear_dev() {
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) {
    delete dev_;
  }
  dev_ = NULL;
}
inline const ::XmsgImClientDeviceInfo& XmsgImAuthSimpleReq::dev() const {
  const ::XmsgImClientDeviceInfo* p = dev_;
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleReq.dev)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImClientDeviceInfo*>(
      &::_XmsgImClientDeviceInfo_default_instance_);
}
inline ::XmsgImClientDeviceInfo* XmsgImAuthSimpleReq::release_dev() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleReq.dev)
  
  ::XmsgImClientDeviceInfo* temp = dev_;
  dev_ = NULL;
  return temp;
}
inline ::XmsgImClientDeviceInfo* XmsgImAuthSimpleReq::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::XmsgImClientDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleReq.dev)
  return dev_;
}
inline void XmsgImAuthSimpleReq::set_allocated_dev(::XmsgImClientDeviceInfo* dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dev_;
  }
  if (dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dev, submessage_arena);
    }
    
  } else {
    
  }
  dev_ = dev;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleReq.dev)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImAuthSimpleRsp

// string token = 1;
inline void XmsgImAuthSimpleRsp::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleRsp::token() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.token)
  return token_.GetNoArena();
}
inline void XmsgImAuthSimpleRsp::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleRsp.token)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleRsp::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleRsp.token)
}
#endif
inline void XmsgImAuthSimpleRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleRsp.token)
}
inline void XmsgImAuthSimpleRsp::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleRsp.token)
}
inline ::std::string* XmsgImAuthSimpleRsp::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleRsp.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleRsp::release_token() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleRsp.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleRsp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleRsp.token)
}

// string secret = 2;
inline void XmsgImAuthSimpleRsp::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleRsp::secret() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.secret)
  return secret_.GetNoArena();
}
inline void XmsgImAuthSimpleRsp::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleRsp.secret)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleRsp::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleRsp.secret)
}
#endif
inline void XmsgImAuthSimpleRsp::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleRsp.secret)
}
inline void XmsgImAuthSimpleRsp::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleRsp.secret)
}
inline ::std::string* XmsgImAuthSimpleRsp::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleRsp.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleRsp::release_secret() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleRsp.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleRsp::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleRsp.secret)
}

// uint64 expired = 3;
inline void XmsgImAuthSimpleRsp::clear_expired() {
  expired_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImAuthSimpleRsp::expired() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.expired)
  return expired_;
}
inline void XmsgImAuthSimpleRsp::set_expired(::google::protobuf::uint64 value) {
  
  expired_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleRsp.expired)
}

// repeated .XmsgImClientServiceAddress apAddr = 4;
inline int XmsgImAuthSimpleRsp::apaddr_size() const {
  return apaddr_.size();
}
inline void XmsgImAuthSimpleRsp::clear_apaddr() {
  apaddr_.Clear();
}
inline const ::XmsgImClientServiceAddress& XmsgImAuthSimpleRsp::apaddr(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.apAddr)
  return apaddr_.Get(index);
}
inline ::XmsgImClientServiceAddress* XmsgImAuthSimpleRsp::mutable_apaddr(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleRsp.apAddr)
  return apaddr_.Mutable(index);
}
inline ::XmsgImClientServiceAddress* XmsgImAuthSimpleRsp::add_apaddr() {
  // @@protoc_insertion_point(field_add:XmsgImAuthSimpleRsp.apAddr)
  return apaddr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >*
XmsgImAuthSimpleRsp::mutable_apaddr() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthSimpleRsp.apAddr)
  return &apaddr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >&
XmsgImAuthSimpleRsp::apaddr() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthSimpleRsp.apAddr)
  return apaddr_;
}

// repeated .XmsgImClientServiceAddress fsAddr = 5;
inline int XmsgImAuthSimpleRsp::fsaddr_size() const {
  return fsaddr_.size();
}
inline void XmsgImAuthSimpleRsp::clear_fsaddr() {
  fsaddr_.Clear();
}
inline const ::XmsgImClientServiceAddress& XmsgImAuthSimpleRsp::fsaddr(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.fsAddr)
  return fsaddr_.Get(index);
}
inline ::XmsgImClientServiceAddress* XmsgImAuthSimpleRsp::mutable_fsaddr(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleRsp.fsAddr)
  return fsaddr_.Mutable(index);
}
inline ::XmsgImClientServiceAddress* XmsgImAuthSimpleRsp::add_fsaddr() {
  // @@protoc_insertion_point(field_add:XmsgImAuthSimpleRsp.fsAddr)
  return fsaddr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >*
XmsgImAuthSimpleRsp::mutable_fsaddr() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthSimpleRsp.fsAddr)
  return &fsaddr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImClientServiceAddress >&
XmsgImAuthSimpleRsp::fsaddr() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthSimpleRsp.fsAddr)
  return fsaddr_;
}

// string cgt = 7;
inline void XmsgImAuthSimpleRsp::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthSimpleRsp::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthSimpleRsp.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImAuthSimpleRsp::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthSimpleRsp.cgt)
}
#if LANG_CXX11
inline void XmsgImAuthSimpleRsp::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthSimpleRsp.cgt)
}
#endif
inline void XmsgImAuthSimpleRsp::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthSimpleRsp.cgt)
}
inline void XmsgImAuthSimpleRsp::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthSimpleRsp.cgt)
}
inline ::std::string* XmsgImAuthSimpleRsp::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthSimpleRsp.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthSimpleRsp::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthSimpleRsp.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthSimpleRsp::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthSimpleRsp.cgt)
}

// map<string, string> ext = 8;
inline int XmsgImAuthSimpleRsp::ext_size() const {
  return ext_.size();
}
inline void XmsgImAuthSimpleRsp::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImAuthSimpleRsp::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImAuthSimpleRsp.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImAuthSimpleRsp::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImAuthSimpleRsp.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// XmsgImAuthRegSimpleReq

// string usr = 1;
inline void XmsgImAuthRegSimpleReq::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthRegSimpleReq::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthRegSimpleReq.usr)
  return usr_.GetNoArena();
}
inline void XmsgImAuthRegSimpleReq::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthRegSimpleReq.usr)
}
#if LANG_CXX11
inline void XmsgImAuthRegSimpleReq::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthRegSimpleReq.usr)
}
#endif
inline void XmsgImAuthRegSimpleReq::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthRegSimpleReq.usr)
}
inline void XmsgImAuthRegSimpleReq::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthRegSimpleReq.usr)
}
inline ::std::string* XmsgImAuthRegSimpleReq::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthRegSimpleReq.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthRegSimpleReq::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthRegSimpleReq.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthRegSimpleReq::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthRegSimpleReq.usr)
}

// string salt = 2;
inline void XmsgImAuthRegSimpleReq::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthRegSimpleReq::salt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthRegSimpleReq.salt)
  return salt_.GetNoArena();
}
inline void XmsgImAuthRegSimpleReq::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthRegSimpleReq.salt)
}
#if LANG_CXX11
inline void XmsgImAuthRegSimpleReq::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthRegSimpleReq.salt)
}
#endif
inline void XmsgImAuthRegSimpleReq::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthRegSimpleReq.salt)
}
inline void XmsgImAuthRegSimpleReq::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthRegSimpleReq.salt)
}
inline ::std::string* XmsgImAuthRegSimpleReq::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthRegSimpleReq.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthRegSimpleReq::release_salt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthRegSimpleReq.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthRegSimpleReq::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthRegSimpleReq.salt)
}

// string pwd = 3;
inline void XmsgImAuthRegSimpleReq::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthRegSimpleReq::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthRegSimpleReq.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImAuthRegSimpleReq::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthRegSimpleReq.pwd)
}
#if LANG_CXX11
inline void XmsgImAuthRegSimpleReq::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthRegSimpleReq.pwd)
}
#endif
inline void XmsgImAuthRegSimpleReq::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthRegSimpleReq.pwd)
}
inline void XmsgImAuthRegSimpleReq::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthRegSimpleReq.pwd)
}
inline ::std::string* XmsgImAuthRegSimpleReq::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthRegSimpleReq.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthRegSimpleReq::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImAuthRegSimpleReq.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthRegSimpleReq::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthRegSimpleReq.pwd)
}

// .XmsgImClientDeviceInfo dev = 4;
inline bool XmsgImAuthRegSimpleReq::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
inline void XmsgImAuthRegSimpleReq::clear_dev() {
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) {
    delete dev_;
  }
  dev_ = NULL;
}
inline const ::XmsgImClientDeviceInfo& XmsgImAuthRegSimpleReq::dev() const {
  const ::XmsgImClientDeviceInfo* p = dev_;
  // @@protoc_insertion_point(field_get:XmsgImAuthRegSimpleReq.dev)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImClientDeviceInfo*>(
      &::_XmsgImClientDeviceInfo_default_instance_);
}
inline ::XmsgImClientDeviceInfo* XmsgImAuthRegSimpleReq::release_dev() {
  // @@protoc_insertion_point(field_release:XmsgImAuthRegSimpleReq.dev)
  
  ::XmsgImClientDeviceInfo* temp = dev_;
  dev_ = NULL;
  return temp;
}
inline ::XmsgImClientDeviceInfo* XmsgImAuthRegSimpleReq::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::XmsgImClientDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthRegSimpleReq.dev)
  return dev_;
}
inline void XmsgImAuthRegSimpleReq::set_allocated_dev(::XmsgImClientDeviceInfo* dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dev_;
  }
  if (dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dev, submessage_arena);
    }
    
  } else {
    
  }
  dev_ = dev;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthRegSimpleReq.dev)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImAuthRegSimpleRsp

// string cgt = 1;
inline void XmsgImAuthRegSimpleRsp::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthRegSimpleRsp::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthRegSimpleRsp.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImAuthRegSimpleRsp::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthRegSimpleRsp.cgt)
}
#if LANG_CXX11
inline void XmsgImAuthRegSimpleRsp::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthRegSimpleRsp.cgt)
}
#endif
inline void XmsgImAuthRegSimpleRsp::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthRegSimpleRsp.cgt)
}
inline void XmsgImAuthRegSimpleRsp::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthRegSimpleRsp.cgt)
}
inline ::std::string* XmsgImAuthRegSimpleRsp::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthRegSimpleRsp.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthRegSimpleRsp::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthRegSimpleRsp.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthRegSimpleRsp::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthRegSimpleRsp.cgt)
}

// map<string, string> ext = 2;
inline int XmsgImAuthRegSimpleRsp::ext_size() const {
  return ext_.size();
}
inline void XmsgImAuthRegSimpleRsp::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImAuthRegSimpleRsp::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImAuthRegSimpleRsp.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImAuthRegSimpleRsp::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImAuthRegSimpleRsp.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImClientDeviceInfo

// string plat = 1;
inline void XmsgImClientDeviceInfo::clear_plat() {
  plat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImClientDeviceInfo::plat() const {
  // @@protoc_insertion_point(field_get:XmsgImClientDeviceInfo.plat)
  return plat_.GetNoArena();
}
inline void XmsgImClientDeviceInfo::set_plat(const ::std::string& value) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImClientDeviceInfo.plat)
}
#if LANG_CXX11
inline void XmsgImClientDeviceInfo::set_plat(::std::string&& value) {
  
  plat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImClientDeviceInfo.plat)
}
#endif
inline void XmsgImClientDeviceInfo::set_plat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImClientDeviceInfo.plat)
}
inline void XmsgImClientDeviceInfo::set_plat(const char* value, size_t size) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImClientDeviceInfo.plat)
}
inline ::std::string* XmsgImClientDeviceInfo::mutable_plat() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImClientDeviceInfo.plat)
  return plat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImClientDeviceInfo::release_plat() {
  // @@protoc_insertion_point(field_release:XmsgImClientDeviceInfo.plat)
  
  return plat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImClientDeviceInfo::set_allocated_plat(::std::string* plat) {
  if (plat != NULL) {
    
  } else {
    
  }
  plat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plat);
  // @@protoc_insertion_point(field_set_allocated:XmsgImClientDeviceInfo.plat)
}

// string did = 2;
inline void XmsgImClientDeviceInfo::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImClientDeviceInfo::did() const {
  // @@protoc_insertion_point(field_get:XmsgImClientDeviceInfo.did)
  return did_.GetNoArena();
}
inline void XmsgImClientDeviceInfo::set_did(const ::std::string& value) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImClientDeviceInfo.did)
}
#if LANG_CXX11
inline void XmsgImClientDeviceInfo::set_did(::std::string&& value) {
  
  did_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImClientDeviceInfo.did)
}
#endif
inline void XmsgImClientDeviceInfo::set_did(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImClientDeviceInfo.did)
}
inline void XmsgImClientDeviceInfo::set_did(const char* value, size_t size) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImClientDeviceInfo.did)
}
inline ::std::string* XmsgImClientDeviceInfo::mutable_did() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImClientDeviceInfo.did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImClientDeviceInfo::release_did() {
  // @@protoc_insertion_point(field_release:XmsgImClientDeviceInfo.did)
  
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImClientDeviceInfo::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    
  } else {
    
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:XmsgImClientDeviceInfo.did)
}

// string ver = 3;
inline void XmsgImClientDeviceInfo::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImClientDeviceInfo::ver() const {
  // @@protoc_insertion_point(field_get:XmsgImClientDeviceInfo.ver)
  return ver_.GetNoArena();
}
inline void XmsgImClientDeviceInfo::set_ver(const ::std::string& value) {
  
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImClientDeviceInfo.ver)
}
#if LANG_CXX11
inline void XmsgImClientDeviceInfo::set_ver(::std::string&& value) {
  
  ver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImClientDeviceInfo.ver)
}
#endif
inline void XmsgImClientDeviceInfo::set_ver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImClientDeviceInfo.ver)
}
inline void XmsgImClientDeviceInfo::set_ver(const char* value, size_t size) {
  
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImClientDeviceInfo.ver)
}
inline ::std::string* XmsgImClientDeviceInfo::mutable_ver() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImClientDeviceInfo.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImClientDeviceInfo::release_ver() {
  // @@protoc_insertion_point(field_release:XmsgImClientDeviceInfo.ver)
  
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImClientDeviceInfo::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    
  } else {
    
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:XmsgImClientDeviceInfo.ver)
}

// map<string, string> ext = 4;
inline int XmsgImClientDeviceInfo::ext_size() const {
  return ext_.size();
}
inline void XmsgImClientDeviceInfo::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImClientDeviceInfo::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImClientDeviceInfo.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImClientDeviceInfo::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImClientDeviceInfo.ext)
  return ext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImClientServiceAddress

// string ip = 1;
inline void XmsgImClientServiceAddress::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImClientServiceAddress::ip() const {
  // @@protoc_insertion_point(field_get:XmsgImClientServiceAddress.ip)
  return ip_.GetNoArena();
}
inline void XmsgImClientServiceAddress::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImClientServiceAddress.ip)
}
#if LANG_CXX11
inline void XmsgImClientServiceAddress::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImClientServiceAddress.ip)
}
#endif
inline void XmsgImClientServiceAddress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImClientServiceAddress.ip)
}
inline void XmsgImClientServiceAddress::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImClientServiceAddress.ip)
}
inline ::std::string* XmsgImClientServiceAddress::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImClientServiceAddress.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImClientServiceAddress::release_ip() {
  // @@protoc_insertion_point(field_release:XmsgImClientServiceAddress.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImClientServiceAddress::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:XmsgImClientServiceAddress.ip)
}

// uint32 port = 2;
inline void XmsgImClientServiceAddress::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImClientServiceAddress::port() const {
  // @@protoc_insertion_point(field_get:XmsgImClientServiceAddress.port)
  return port_;
}
inline void XmsgImClientServiceAddress::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgImClientServiceAddress.port)
}

// uint32 weight = 3;
inline void XmsgImClientServiceAddress::clear_weight() {
  weight_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImClientServiceAddress::weight() const {
  // @@protoc_insertion_point(field_get:XmsgImClientServiceAddress.weight)
  return weight_;
}
inline void XmsgImClientServiceAddress::set_weight(::google::protobuf::uint32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:XmsgImClientServiceAddress.weight)
}

// repeated string proto = 4;
inline int XmsgImClientServiceAddress::proto_size() const {
  return proto_.size();
}
inline void XmsgImClientServiceAddress::clear_proto() {
  proto_.Clear();
}
inline const ::std::string& XmsgImClientServiceAddress::proto(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImClientServiceAddress.proto)
  return proto_.Get(index);
}
inline ::std::string* XmsgImClientServiceAddress::mutable_proto(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImClientServiceAddress.proto)
  return proto_.Mutable(index);
}
inline void XmsgImClientServiceAddress::set_proto(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XmsgImClientServiceAddress.proto)
  proto_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XmsgImClientServiceAddress::set_proto(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XmsgImClientServiceAddress.proto)
  proto_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XmsgImClientServiceAddress::set_proto(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XmsgImClientServiceAddress.proto)
}
inline void XmsgImClientServiceAddress::set_proto(int index, const char* value, size_t size) {
  proto_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XmsgImClientServiceAddress.proto)
}
inline ::std::string* XmsgImClientServiceAddress::add_proto() {
  // @@protoc_insertion_point(field_add_mutable:XmsgImClientServiceAddress.proto)
  return proto_.Add();
}
inline void XmsgImClientServiceAddress::add_proto(const ::std::string& value) {
  proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XmsgImClientServiceAddress.proto)
}
#if LANG_CXX11
inline void XmsgImClientServiceAddress::add_proto(::std::string&& value) {
  proto_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XmsgImClientServiceAddress.proto)
}
#endif
inline void XmsgImClientServiceAddress::add_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XmsgImClientServiceAddress.proto)
}
inline void XmsgImClientServiceAddress::add_proto(const char* value, size_t size) {
  proto_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XmsgImClientServiceAddress.proto)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XmsgImClientServiceAddress::proto() const {
  // @@protoc_insertion_point(field_list:XmsgImClientServiceAddress.proto)
  return proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XmsgImClientServiceAddress::mutable_proto() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImClientServiceAddress.proto)
  return &proto_;
}

// map<string, string> ext = 5;
inline int XmsgImClientServiceAddress::ext_size() const {
  return ext_.size();
}
inline void XmsgImClientServiceAddress::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImClientServiceAddress::ext() const {
  // @@protoc_insertion_point(field_map:XmsgImClientServiceAddress.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImClientServiceAddress::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImClientServiceAddress.ext)
  return ext_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED
