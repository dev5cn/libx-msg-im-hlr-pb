// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-hlr.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dim_2dhlr_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dim_2dhlr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImHlrCfgPbImpl();
void InitDefaultsXmsgImHlrCfgPb();
void InitDefaultsXmsgImHlrCfgMongodbImpl();
void InitDefaultsXmsgImHlrCfgMongodb();
void InitDefaultsXmsgImHlrCfgMysqlImpl();
void InitDefaultsXmsgImHlrCfgMysql();
void InitDefaultsXmsgImHlrCfgLogImpl();
void InitDefaultsXmsgImHlrCfgLog();
void InitDefaultsXmsgImHlrCfgXscTcpServerImpl();
void InitDefaultsXmsgImHlrCfgXscTcpServer();
void InitDefaultsXmsgImHlrCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr();
void InitDefaultsXmsgImHlrCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr();
void InitDefaultsXmsgImHlrCfgContractsImpl();
void InitDefaultsXmsgImHlrCfgContracts();
void InitDefaultsXmsgImHlrCfgMiscImpl();
void InitDefaultsXmsgImHlrCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgImHlrCfgPb();
  InitDefaultsXmsgImHlrCfgMongodb();
  InitDefaultsXmsgImHlrCfgMysql();
  InitDefaultsXmsgImHlrCfgLog();
  InitDefaultsXmsgImHlrCfgXscTcpServer();
  InitDefaultsXmsgImHlrCfgXmsgNeH2nAddr();
  InitDefaultsXmsgImHlrCfgXmsgNeN2hAddr();
  InitDefaultsXmsgImHlrCfgContracts();
  InitDefaultsXmsgImHlrCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto
class XmsgImHlrCfgContracts;
class XmsgImHlrCfgContractsDefaultTypeInternal;
extern XmsgImHlrCfgContractsDefaultTypeInternal _XmsgImHlrCfgContracts_default_instance_;
class XmsgImHlrCfgLog;
class XmsgImHlrCfgLogDefaultTypeInternal;
extern XmsgImHlrCfgLogDefaultTypeInternal _XmsgImHlrCfgLog_default_instance_;
class XmsgImHlrCfgMisc;
class XmsgImHlrCfgMiscDefaultTypeInternal;
extern XmsgImHlrCfgMiscDefaultTypeInternal _XmsgImHlrCfgMisc_default_instance_;
class XmsgImHlrCfgMongodb;
class XmsgImHlrCfgMongodbDefaultTypeInternal;
extern XmsgImHlrCfgMongodbDefaultTypeInternal _XmsgImHlrCfgMongodb_default_instance_;
class XmsgImHlrCfgMysql;
class XmsgImHlrCfgMysqlDefaultTypeInternal;
extern XmsgImHlrCfgMysqlDefaultTypeInternal _XmsgImHlrCfgMysql_default_instance_;
class XmsgImHlrCfgPb;
class XmsgImHlrCfgPbDefaultTypeInternal;
extern XmsgImHlrCfgPbDefaultTypeInternal _XmsgImHlrCfgPb_default_instance_;
class XmsgImHlrCfgXmsgNeH2nAddr;
class XmsgImHlrCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgImHlrCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgImHlrCfgXmsgNeH2nAddr_default_instance_;
class XmsgImHlrCfgXmsgNeN2hAddr;
class XmsgImHlrCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImHlrCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImHlrCfgXmsgNeN2hAddr_default_instance_;
class XmsgImHlrCfgXscTcpServer;
class XmsgImHlrCfgXscTcpServerDefaultTypeInternal;
extern XmsgImHlrCfgXscTcpServerDefaultTypeInternal _XmsgImHlrCfgXscTcpServer_default_instance_;

enum XmsgImHlrPlatCompeteMode {
  X_MSG_IM_HLR_PLAT_COMPETE_MODE_TYPE_ONLY = 0,
  X_MSG_IM_HLR_PLAT_COMPETE_MODE_PLAT_ONLY = 1,
  X_MSG_IM_HLR_PLAT_COMPETE_MODE_TERMINAL_ONLY = 2,
  X_MSG_IM_HLR_PLAT_COMPETE_MODE_AUTH = 3,
  XmsgImHlrPlatCompeteMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  XmsgImHlrPlatCompeteMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool XmsgImHlrPlatCompeteMode_IsValid(int value);
const XmsgImHlrPlatCompeteMode XmsgImHlrPlatCompeteMode_MIN = X_MSG_IM_HLR_PLAT_COMPETE_MODE_TYPE_ONLY;
const XmsgImHlrPlatCompeteMode XmsgImHlrPlatCompeteMode_MAX = X_MSG_IM_HLR_PLAT_COMPETE_MODE_AUTH;
const int XmsgImHlrPlatCompeteMode_ARRAYSIZE = XmsgImHlrPlatCompeteMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* XmsgImHlrPlatCompeteMode_descriptor();
inline const ::std::string& XmsgImHlrPlatCompeteMode_Name(XmsgImHlrPlatCompeteMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    XmsgImHlrPlatCompeteMode_descriptor(), value);
}
inline bool XmsgImHlrPlatCompeteMode_Parse(
    const ::std::string& name, XmsgImHlrPlatCompeteMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XmsgImHlrPlatCompeteMode>(
    XmsgImHlrPlatCompeteMode_descriptor(), name, value);
}
// ===================================================================

class XmsgImHlrCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgPb) */ {
 public:
  XmsgImHlrCfgPb();
  virtual ~XmsgImHlrCfgPb();

  XmsgImHlrCfgPb(const XmsgImHlrCfgPb& from);

  inline XmsgImHlrCfgPb& operator=(const XmsgImHlrCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgPb(XmsgImHlrCfgPb&& from) noexcept
    : XmsgImHlrCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgPb& operator=(XmsgImHlrCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgPb*>(
               &_XmsgImHlrCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgImHlrCfgPb* other);
  friend void swap(XmsgImHlrCfgPb& a, XmsgImHlrCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgPb& from);
  void MergeFrom(const XmsgImHlrCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 7;
  const ::XmsgImHlrCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgImHlrCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgImHlrCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 8;
  const ::XmsgImHlrCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImHlrCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImHlrCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeN2hAddr >&
      n2h() const;

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgImHlrCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgImHlrCfgMongodb& mongodb() const;
  ::XmsgImHlrCfgMongodb* release_mongodb();
  ::XmsgImHlrCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgImHlrCfgMongodb* mongodb);

  // .XmsgImHlrCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgImHlrCfgMysql& mysql() const;
  ::XmsgImHlrCfgMysql* release_mysql();
  ::XmsgImHlrCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgImHlrCfgMysql* mysql);

  // .XmsgImHlrCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgImHlrCfgLog& log() const;
  ::XmsgImHlrCfgLog* release_log();
  ::XmsgImHlrCfgLog* mutable_log();
  void set_allocated_log(::XmsgImHlrCfgLog* log);

  // .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
  bool has_xsctcpcfg() const;
  void clear_xsctcpcfg();
  static const int kXscTcpCfgFieldNumber = 6;
  const ::XmsgImHlrCfgXscTcpServer& xsctcpcfg() const;
  ::XmsgImHlrCfgXscTcpServer* release_xsctcpcfg();
  ::XmsgImHlrCfgXscTcpServer* mutable_xsctcpcfg();
  void set_allocated_xsctcpcfg(::XmsgImHlrCfgXscTcpServer* xsctcpcfg);

  // .XmsgImHlrCfgMisc misc = 9;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 9;
  const ::XmsgImHlrCfgMisc& misc() const;
  ::XmsgImHlrCfgMisc* release_misc();
  ::XmsgImHlrCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgImHlrCfgMisc* misc);

  // .XmsgImHlrCfgContracts contracts = 13;
  bool has_contracts() const;
  void clear_contracts();
  static const int kContractsFieldNumber = 13;
  const ::XmsgImHlrCfgContracts& contracts() const;
  ::XmsgImHlrCfgContracts* release_contracts();
  ::XmsgImHlrCfgContracts* mutable_contracts();
  void set_allocated_contracts(::XmsgImHlrCfgContracts* contracts);

  // uint64 gts = 10;
  void clear_gts();
  static const int kGtsFieldNumber = 10;
  ::google::protobuf::uint64 gts() const;
  void set_gts(::google::protobuf::uint64 value);

  // uint64 uts = 11;
  void clear_uts();
  static const int kUtsFieldNumber = 11;
  ::google::protobuf::uint64 uts() const;
  void set_uts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgImHlrCfgMongodb* mongodb_;
  ::XmsgImHlrCfgMysql* mysql_;
  ::XmsgImHlrCfgLog* log_;
  ::XmsgImHlrCfgXscTcpServer* xsctcpcfg_;
  ::XmsgImHlrCfgMisc* misc_;
  ::XmsgImHlrCfgContracts* contracts_;
  ::google::protobuf::uint64 gts_;
  ::google::protobuf::uint64 uts_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgMongodb) */ {
 public:
  XmsgImHlrCfgMongodb();
  virtual ~XmsgImHlrCfgMongodb();

  XmsgImHlrCfgMongodb(const XmsgImHlrCfgMongodb& from);

  inline XmsgImHlrCfgMongodb& operator=(const XmsgImHlrCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgMongodb(XmsgImHlrCfgMongodb&& from) noexcept
    : XmsgImHlrCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgMongodb& operator=(XmsgImHlrCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgMongodb*>(
               &_XmsgImHlrCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgImHlrCfgMongodb* other);
  friend void swap(XmsgImHlrCfgMongodb& a, XmsgImHlrCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgMongodb& from);
  void MergeFrom(const XmsgImHlrCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgMysql) */ {
 public:
  XmsgImHlrCfgMysql();
  virtual ~XmsgImHlrCfgMysql();

  XmsgImHlrCfgMysql(const XmsgImHlrCfgMysql& from);

  inline XmsgImHlrCfgMysql& operator=(const XmsgImHlrCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgMysql(XmsgImHlrCfgMysql&& from) noexcept
    : XmsgImHlrCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgMysql& operator=(XmsgImHlrCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgMysql*>(
               &_XmsgImHlrCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgImHlrCfgMysql* other);
  friend void swap(XmsgImHlrCfgMysql& a, XmsgImHlrCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgMysql& from);
  void MergeFrom(const XmsgImHlrCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgLog) */ {
 public:
  XmsgImHlrCfgLog();
  virtual ~XmsgImHlrCfgLog();

  XmsgImHlrCfgLog(const XmsgImHlrCfgLog& from);

  inline XmsgImHlrCfgLog& operator=(const XmsgImHlrCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgLog(XmsgImHlrCfgLog&& from) noexcept
    : XmsgImHlrCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgLog& operator=(XmsgImHlrCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgLog*>(
               &_XmsgImHlrCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImHlrCfgLog* other);
  friend void swap(XmsgImHlrCfgLog& a, XmsgImHlrCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgLog& from);
  void MergeFrom(const XmsgImHlrCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgXscTcpServer) */ {
 public:
  XmsgImHlrCfgXscTcpServer();
  virtual ~XmsgImHlrCfgXscTcpServer();

  XmsgImHlrCfgXscTcpServer(const XmsgImHlrCfgXscTcpServer& from);

  inline XmsgImHlrCfgXscTcpServer& operator=(const XmsgImHlrCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgXscTcpServer(XmsgImHlrCfgXscTcpServer&& from) noexcept
    : XmsgImHlrCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgXscTcpServer& operator=(XmsgImHlrCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgXscTcpServer*>(
               &_XmsgImHlrCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgImHlrCfgXscTcpServer* other);
  friend void swap(XmsgImHlrCfgXscTcpServer& a, XmsgImHlrCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgXscTcpServer& from);
  void MergeFrom(const XmsgImHlrCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgXmsgNeH2nAddr) */ {
 public:
  XmsgImHlrCfgXmsgNeH2nAddr();
  virtual ~XmsgImHlrCfgXmsgNeH2nAddr();

  XmsgImHlrCfgXmsgNeH2nAddr(const XmsgImHlrCfgXmsgNeH2nAddr& from);

  inline XmsgImHlrCfgXmsgNeH2nAddr& operator=(const XmsgImHlrCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgXmsgNeH2nAddr(XmsgImHlrCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgImHlrCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgXmsgNeH2nAddr& operator=(XmsgImHlrCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgXmsgNeH2nAddr*>(
               &_XmsgImHlrCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImHlrCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgImHlrCfgXmsgNeH2nAddr& a, XmsgImHlrCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgImHlrCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string addr = 3;
  void clear_addr();
  static const int kAddrFieldNumber = 3;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 4;
  void clear_pwd();
  static const int kPwdFieldNumber = 4;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 5;
  void clear_alg();
  static const int kAlgFieldNumber = 5;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 6;
  void clear_redundant();
  static const int kRedundantFieldNumber = 6;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImHlrCfgXmsgNeN2hAddr();
  virtual ~XmsgImHlrCfgXmsgNeN2hAddr();

  XmsgImHlrCfgXmsgNeN2hAddr(const XmsgImHlrCfgXmsgNeN2hAddr& from);

  inline XmsgImHlrCfgXmsgNeN2hAddr& operator=(const XmsgImHlrCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgXmsgNeN2hAddr(XmsgImHlrCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImHlrCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgXmsgNeN2hAddr& operator=(XmsgImHlrCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgXmsgNeN2hAddr*>(
               &_XmsgImHlrCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgImHlrCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImHlrCfgXmsgNeN2hAddr& a, XmsgImHlrCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImHlrCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgContracts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgContracts) */ {
 public:
  XmsgImHlrCfgContracts();
  virtual ~XmsgImHlrCfgContracts();

  XmsgImHlrCfgContracts(const XmsgImHlrCfgContracts& from);

  inline XmsgImHlrCfgContracts& operator=(const XmsgImHlrCfgContracts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgContracts(XmsgImHlrCfgContracts&& from) noexcept
    : XmsgImHlrCfgContracts() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgContracts& operator=(XmsgImHlrCfgContracts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgContracts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgContracts* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgContracts*>(
               &_XmsgImHlrCfgContracts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImHlrCfgContracts* other);
  friend void swap(XmsgImHlrCfgContracts& a, XmsgImHlrCfgContracts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgContracts* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgContracts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgContracts& from);
  void MergeFrom(const XmsgImHlrCfgContracts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgContracts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // uint32 usrEventExpired = 2;
  void clear_usreventexpired();
  static const int kUsrEventExpiredFieldNumber = 2;
  ::google::protobuf::uint32 usreventexpired() const;
  void set_usreventexpired(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgContracts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_;
  ::google::protobuf::uint32 usreventexpired_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgContractsImpl();
};
// -------------------------------------------------------------------

class XmsgImHlrCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImHlrCfgMisc) */ {
 public:
  XmsgImHlrCfgMisc();
  virtual ~XmsgImHlrCfgMisc();

  XmsgImHlrCfgMisc(const XmsgImHlrCfgMisc& from);

  inline XmsgImHlrCfgMisc& operator=(const XmsgImHlrCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImHlrCfgMisc(XmsgImHlrCfgMisc&& from) noexcept
    : XmsgImHlrCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgImHlrCfgMisc& operator=(XmsgImHlrCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImHlrCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImHlrCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgImHlrCfgMisc*>(
               &_XmsgImHlrCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgImHlrCfgMisc* other);
  friend void swap(XmsgImHlrCfgMisc& a, XmsgImHlrCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImHlrCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImHlrCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImHlrCfgMisc& from);
  void MergeFrom(const XmsgImHlrCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImHlrCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
  void clear_platcompetemode();
  static const int kPlatCompeteModeFieldNumber = 1;
  ::XmsgImHlrPlatCompeteMode platcompetemode() const;
  void set_platcompetemode(::XmsgImHlrPlatCompeteMode value);

  // @@protoc_insertion_point(class_scope:XmsgImHlrCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int platcompetemode_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dhlr_2eproto::InitDefaultsXmsgImHlrCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgImHlrCfgPb

// string cgt = 1;
inline void XmsgImHlrCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImHlrCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgImHlrCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgPb.cgt)
}
#endif
inline void XmsgImHlrCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgPb.cgt)
}
inline void XmsgImHlrCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgPb.cgt)
}
inline ::std::string* XmsgImHlrCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgImHlrCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgImHlrCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgImHlrCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgPb.cfgType)
}
#endif
inline void XmsgImHlrCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgPb.cfgType)
}
inline void XmsgImHlrCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgPb.cfgType)
}
inline ::std::string* XmsgImHlrCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.cfgType)
}

// .XmsgImHlrCfgMongodb mongodb = 3;
inline bool XmsgImHlrCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgImHlrCfgMongodb& XmsgImHlrCfgPb::mongodb() const {
  const ::XmsgImHlrCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgMongodb*>(
      &::_XmsgImHlrCfgMongodb_default_instance_);
}
inline ::XmsgImHlrCfgMongodb* XmsgImHlrCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.mongodb)
  
  ::XmsgImHlrCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgMongodb* XmsgImHlrCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgImHlrCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgImHlrCfgPb::set_allocated_mongodb(::XmsgImHlrCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.mongodb)
}

// .XmsgImHlrCfgMysql mysql = 4;
inline bool XmsgImHlrCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgImHlrCfgMysql& XmsgImHlrCfgPb::mysql() const {
  const ::XmsgImHlrCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgMysql*>(
      &::_XmsgImHlrCfgMysql_default_instance_);
}
inline ::XmsgImHlrCfgMysql* XmsgImHlrCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.mysql)
  
  ::XmsgImHlrCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgMysql* XmsgImHlrCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgImHlrCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.mysql)
  return mysql_;
}
inline void XmsgImHlrCfgPb::set_allocated_mysql(::XmsgImHlrCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.mysql)
}

// .XmsgImHlrCfgLog log = 5;
inline bool XmsgImHlrCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgImHlrCfgLog& XmsgImHlrCfgPb::log() const {
  const ::XmsgImHlrCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgLog*>(
      &::_XmsgImHlrCfgLog_default_instance_);
}
inline ::XmsgImHlrCfgLog* XmsgImHlrCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.log)
  
  ::XmsgImHlrCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgLog* XmsgImHlrCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgImHlrCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.log)
  return log_;
}
inline void XmsgImHlrCfgPb::set_allocated_log(::XmsgImHlrCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.log)
}

// .XmsgImHlrCfgXscTcpServer xscTcpCfg = 6;
inline bool XmsgImHlrCfgPb::has_xsctcpcfg() const {
  return this != internal_default_instance() && xsctcpcfg_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_xsctcpcfg() {
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
}
inline const ::XmsgImHlrCfgXscTcpServer& XmsgImHlrCfgPb::xsctcpcfg() const {
  const ::XmsgImHlrCfgXscTcpServer* p = xsctcpcfg_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.xscTcpCfg)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgXscTcpServer*>(
      &::_XmsgImHlrCfgXscTcpServer_default_instance_);
}
inline ::XmsgImHlrCfgXscTcpServer* XmsgImHlrCfgPb::release_xsctcpcfg() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.xscTcpCfg)
  
  ::XmsgImHlrCfgXscTcpServer* temp = xsctcpcfg_;
  xsctcpcfg_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgXscTcpServer* XmsgImHlrCfgPb::mutable_xsctcpcfg() {
  
  if (xsctcpcfg_ == NULL) {
    xsctcpcfg_ = new ::XmsgImHlrCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.xscTcpCfg)
  return xsctcpcfg_;
}
inline void XmsgImHlrCfgPb::set_allocated_xsctcpcfg(::XmsgImHlrCfgXscTcpServer* xsctcpcfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xsctcpcfg_;
  }
  if (xsctcpcfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xsctcpcfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xsctcpcfg, submessage_arena);
    }
    
  } else {
    
  }
  xsctcpcfg_ = xsctcpcfg;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.xscTcpCfg)
}

// repeated .XmsgImHlrCfgXmsgNeH2nAddr h2n = 7;
inline int XmsgImHlrCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgImHlrCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgImHlrCfgXmsgNeH2nAddr& XmsgImHlrCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgImHlrCfgXmsgNeH2nAddr* XmsgImHlrCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgImHlrCfgXmsgNeH2nAddr* XmsgImHlrCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgImHlrCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeH2nAddr >*
XmsgImHlrCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImHlrCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeH2nAddr >&
XmsgImHlrCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgImHlrCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgImHlrCfgXmsgNeN2hAddr n2h = 8;
inline int XmsgImHlrCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgImHlrCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImHlrCfgXmsgNeN2hAddr& XmsgImHlrCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImHlrCfgXmsgNeN2hAddr* XmsgImHlrCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImHlrCfgXmsgNeN2hAddr* XmsgImHlrCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgImHlrCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeN2hAddr >*
XmsgImHlrCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImHlrCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImHlrCfgXmsgNeN2hAddr >&
XmsgImHlrCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgImHlrCfgPb.n2h)
  return n2h_;
}

// .XmsgImHlrCfgMisc misc = 9;
inline bool XmsgImHlrCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgImHlrCfgMisc& XmsgImHlrCfgPb::misc() const {
  const ::XmsgImHlrCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgMisc*>(
      &::_XmsgImHlrCfgMisc_default_instance_);
}
inline ::XmsgImHlrCfgMisc* XmsgImHlrCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.misc)
  
  ::XmsgImHlrCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgMisc* XmsgImHlrCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgImHlrCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.misc)
  return misc_;
}
inline void XmsgImHlrCfgPb::set_allocated_misc(::XmsgImHlrCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.misc)
}

// .XmsgImHlrCfgContracts contracts = 13;
inline bool XmsgImHlrCfgPb::has_contracts() const {
  return this != internal_default_instance() && contracts_ != NULL;
}
inline void XmsgImHlrCfgPb::clear_contracts() {
  if (GetArenaNoVirtual() == NULL && contracts_ != NULL) {
    delete contracts_;
  }
  contracts_ = NULL;
}
inline const ::XmsgImHlrCfgContracts& XmsgImHlrCfgPb::contracts() const {
  const ::XmsgImHlrCfgContracts* p = contracts_;
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.contracts)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImHlrCfgContracts*>(
      &::_XmsgImHlrCfgContracts_default_instance_);
}
inline ::XmsgImHlrCfgContracts* XmsgImHlrCfgPb::release_contracts() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgPb.contracts)
  
  ::XmsgImHlrCfgContracts* temp = contracts_;
  contracts_ = NULL;
  return temp;
}
inline ::XmsgImHlrCfgContracts* XmsgImHlrCfgPb::mutable_contracts() {
  
  if (contracts_ == NULL) {
    contracts_ = new ::XmsgImHlrCfgContracts;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgPb.contracts)
  return contracts_;
}
inline void XmsgImHlrCfgPb::set_allocated_contracts(::XmsgImHlrCfgContracts* contracts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contracts_;
  }
  if (contracts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contracts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contracts, submessage_arena);
    }
    
  } else {
    
  }
  contracts_ = contracts;
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgPb.contracts)
}

// uint64 gts = 10;
inline void XmsgImHlrCfgPb::clear_gts() {
  gts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImHlrCfgPb::gts() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.gts)
  return gts_;
}
inline void XmsgImHlrCfgPb::set_gts(::google::protobuf::uint64 value) {
  
  gts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgPb.gts)
}

// uint64 uts = 11;
inline void XmsgImHlrCfgPb::clear_uts() {
  uts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImHlrCfgPb::uts() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgPb.uts)
  return uts_;
}
inline void XmsgImHlrCfgPb::set_uts(::google::protobuf::uint64 value) {
  
  uts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgPb.uts)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgMongodb

// string uri = 1;
inline void XmsgImHlrCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgImHlrCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgImHlrCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgMongodb.uri)
}
#endif
inline void XmsgImHlrCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgMongodb.uri)
}
inline void XmsgImHlrCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgMongodb.uri)
}
inline ::std::string* XmsgImHlrCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgMysql

// string host = 1;
inline void XmsgImHlrCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgImHlrCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgImHlrCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgMysql.host)
}
#endif
inline void XmsgImHlrCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgMysql.host)
}
inline void XmsgImHlrCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgMysql.host)
}
inline ::std::string* XmsgImHlrCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgImHlrCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.port)
  return port_;
}
inline void XmsgImHlrCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.port)
}

// string db = 3;
inline void XmsgImHlrCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgImHlrCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgImHlrCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgMysql.db)
}
#endif
inline void XmsgImHlrCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgMysql.db)
}
inline void XmsgImHlrCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgMysql.db)
}
inline ::std::string* XmsgImHlrCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgMysql.db)
}

// string usr = 4;
inline void XmsgImHlrCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgImHlrCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgImHlrCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgMysql.usr)
}
#endif
inline void XmsgImHlrCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgMysql.usr)
}
inline void XmsgImHlrCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgMysql.usr)
}
inline ::std::string* XmsgImHlrCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgMysql.usr)
}

// string password = 5;
inline void XmsgImHlrCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgImHlrCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgImHlrCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgMysql.password)
}
#endif
inline void XmsgImHlrCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgMysql.password)
}
inline void XmsgImHlrCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgMysql.password)
}
inline ::std::string* XmsgImHlrCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgImHlrCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgImHlrCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgLog

// string level = 1;
inline void XmsgImHlrCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgImHlrCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgLog.level)
}
#if LANG_CXX11
inline void XmsgImHlrCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgLog.level)
}
#endif
inline void XmsgImHlrCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgLog.level)
}
inline void XmsgImHlrCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgLog.level)
}
inline ::std::string* XmsgImHlrCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgLog.level)
}

// string output = 2;
inline void XmsgImHlrCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgImHlrCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgLog.output)
}
#if LANG_CXX11
inline void XmsgImHlrCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgLog.output)
}
#endif
inline void XmsgImHlrCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgLog.output)
}
inline void XmsgImHlrCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgLog.output)
}
inline ::std::string* XmsgImHlrCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgXscTcpServer

// string addr = 1;
inline void XmsgImHlrCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImHlrCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXscTcpServer.addr)
}
#endif
inline void XmsgImHlrCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXscTcpServer.addr)
}
inline void XmsgImHlrCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXscTcpServer.addr)
}
inline ::std::string* XmsgImHlrCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgImHlrCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgImHlrCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgImHlrCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgImHlrCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgImHlrCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgImHlrCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgImHlrCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgImHlrCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgImHlrCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgImHlrCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgImHlrCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgImHlrCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgImHlrCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgImHlrCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgImHlrCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgImHlrCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgImHlrCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgImHlrCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgImHlrCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgImHlrCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgImHlrCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgImHlrCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgImHlrCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgImHlrCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgImHlrCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgImHlrCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgImHlrCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgImHlrCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeH2nAddr.neg)
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeH2nAddr.neg)
}

// string cgt = 2;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeH2nAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
}
#endif
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeH2nAddr.cgt)
}

// string addr = 3;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeH2nAddr.addr)
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeH2nAddr.addr)
}

// string pwd = 4;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeH2nAddr.pwd)
}

// string alg = 5;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeH2nAddr.alg)
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 6;
inline void XmsgImHlrCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgImHlrCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImHlrCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImHlrCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgImHlrCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgImHlrCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImHlrCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImHlrCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImHlrCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImHlrCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImHlrCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImHlrCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImHlrCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImHlrCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImHlrCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgContracts

// bool enable = 1;
inline void XmsgImHlrCfgContracts::clear_enable() {
  enable_ = false;
}
inline bool XmsgImHlrCfgContracts::enable() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgContracts.enable)
  return enable_;
}
inline void XmsgImHlrCfgContracts::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgContracts.enable)
}

// uint32 usrEventExpired = 2;
inline void XmsgImHlrCfgContracts::clear_usreventexpired() {
  usreventexpired_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImHlrCfgContracts::usreventexpired() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgContracts.usrEventExpired)
  return usreventexpired_;
}
inline void XmsgImHlrCfgContracts::set_usreventexpired(::google::protobuf::uint32 value) {
  
  usreventexpired_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgContracts.usrEventExpired)
}

// -------------------------------------------------------------------

// XmsgImHlrCfgMisc

// .XmsgImHlrPlatCompeteMode platCompeteMode = 1;
inline void XmsgImHlrCfgMisc::clear_platcompetemode() {
  platcompetemode_ = 0;
}
inline ::XmsgImHlrPlatCompeteMode XmsgImHlrCfgMisc::platcompetemode() const {
  // @@protoc_insertion_point(field_get:XmsgImHlrCfgMisc.platCompeteMode)
  return static_cast< ::XmsgImHlrPlatCompeteMode >(platcompetemode_);
}
inline void XmsgImHlrCfgMisc::set_platcompetemode(::XmsgImHlrPlatCompeteMode value) {
  
  platcompetemode_ = value;
  // @@protoc_insertion_point(field_set:XmsgImHlrCfgMisc.platCompeteMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::XmsgImHlrPlatCompeteMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XmsgImHlrPlatCompeteMode>() {
  return ::XmsgImHlrPlatCompeteMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dim_2dhlr_2eproto__INCLUDED
